{"version":3,"sources":["redux/user/userTypes.js","redux/chat/chatTypes.js","components/Spinner/Spinner.jsx","redux/user/userUtils.js","redux/user/userReducer.js","redux/chat/chatReducer.js","redux/posts/postUtils.js","redux/posts/postsReducer.js","redux/rootReducer.js","redux/store.js","index.js","redux/posts/postsTypes.js"],"names":["UserActionTypes","GUEST_USER","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","UPDATE_PROFILE_START","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAILURE","LOGOUT","ChatActionTypes","NEW_MESSAGE","USER_ONLINE","Spinner","className","saveErrorMessage","state","action","loading","errMessage","payload","INITIAL_STATE","isLoggedIn","username","email","validUntil","guest","password","userReducer","type","chatHistory","usersOnline","chatReducer","areFetching","items","postReducer","PostActionTypes","FETCH_POSTS_START","NEW_POST_START","EDIT_POST_START","DELETE_POST_START","FETCH_POSTS_SUCCESS","NEW_POST_SUCCESS","EDIT_POST_SUCCESS","map","post","_id","DELETE_POST_SUCCESS","filter","FETCH_POSTS_FAILURE","DELETE_POST_FAILURE","EDIT_POST_FAILURE","NEW_POST_FAILURE","persistConfig","key","storage","whitelist","appReducer","combineReducers","user","chat","posts","postsReducer","persistReducer","removeItem","undefined","middlewares","thunk","logger","store","createStore","rootReducer","applyMiddleware","persistor","persistStore","App","React","lazy","ReactDOM","render","StrictMode","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.d8799e3c.chunk.js","sourcesContent":["const UserActionTypes = {\r\n    GUEST_USER: 'GUEST_USER',\r\n\r\n    LOGIN_START: 'LOGIN_START',\r\n    LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n    LOGIN_FAILURE: 'LOGIN_FAILURE',\r\n\r\n    UPDATE_PROFILE_START: 'UPDATE_PROFILE_START',\r\n    UPDATE_PROFILE_SUCCESS: 'UPDATE_PROFILE_SUCCESS',\r\n    UPDATE_PROFILE_FAILURE: 'UPDATE_PROFILE_FAILURE',\r\n\r\n    LOGOUT: 'LOGOUT',\r\n};\r\n\r\nexport default UserActionTypes;","const ChatActionTypes = {\r\n    NEW_MESSAGE: 'NEW_MESSAGE',\r\n    USER_ONLINE: 'USER_ONLINE',\r\n};\r\n\r\nexport default ChatActionTypes;","import React from 'react'\r\nimport './Spinner-styles.scss'\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div className=\"loader\">Loading...</div>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","export function saveErrorMessage(state, action) {\r\n    return {\r\n        ...state,\r\n        loading: false,\r\n        errMessage: action.payload\r\n    }\r\n}","import UserActionTypes from \"./userTypes\";\r\nimport { saveErrorMessage } from \"./userUtils\";\r\n\r\nconst INITIAL_STATE = {\r\n  isLoggedIn: false,\r\n  username: null,\r\n  email: null,\r\n  loading: false,\r\n  validUntil: null,\r\n  errMessage: null,\r\n  guest: {\r\n    username: \"GuestUser\",\r\n    password: 123456,\r\n  },\r\n};\r\n\r\nfunction userReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case UserActionTypes.LOGIN_START:\r\n    case UserActionTypes.UPDATE_PROFILE_START:\r\n      return { ...state, loading: true };\r\n\r\n    case UserActionTypes.LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        errMessage: null,\r\n        loading: false,\r\n        isLoggedIn: true,\r\n        ...action.payload,\r\n      };\r\n    case UserActionTypes.UPDATE_PROFILE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        errMessage: null,\r\n        loading: false,\r\n        ...action.payload,\r\n      };\r\n\r\n    case UserActionTypes.LOGIN_FAILURE:\r\n    case UserActionTypes.UPDATE_PROFILE_FAILURE:\r\n      return saveErrorMessage(state, action);\r\n\r\n    case UserActionTypes.LOGOUT:\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default userReducer;\r\n","import ChatActionTypes from './chatTypes';\r\n\r\nconst INITIAL_STATE = {\r\n    chatHistory: [],\r\n    usersOnline: [],\r\n};\r\n\r\nconst chatReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ChatActionTypes.NEW_MESSAGE:\r\n            return {\r\n                ...state,\r\n                chatHistory: [...state.chatHistory, action.payload]\r\n            }\r\n        case ChatActionTypes.USER_ONLINE:\r\n            return {\r\n                ...state,\r\n                usersOnline: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default chatReducer;","export function saveErrorMessage(state, action) {\r\n    return {\r\n        ...state,\r\n        areFetching: false,\r\n        errMessage: action.payload\r\n    }\r\n}","import PostActionTypes from './postsTypes';\r\nimport { saveErrorMessage } from './postUtils';\r\n\r\nconst INITIAL_STATE = {\r\n    items: [],\r\n    areFetching: false,\r\n    errMessage: null\r\n};\r\n\r\nconst postReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case PostActionTypes.FETCH_POSTS_START:\r\n        case PostActionTypes.NEW_POST_START:\r\n        case PostActionTypes.EDIT_POST_START:\r\n        case PostActionTypes.DELETE_POST_START:\r\n            return {\r\n                ...state,\r\n                areFetching: true\r\n            }\r\n\r\n        case PostActionTypes.FETCH_POSTS_SUCCESS:\r\n            return {\r\n                ...state, areFetching: false,\r\n                items: action.payload\r\n            }\r\n        case PostActionTypes.NEW_POST_SUCCESS:\r\n            return {\r\n                ...state, areFetching: false,\r\n                items: [action.payload, ...state.items]\r\n            };\r\n        case PostActionTypes.EDIT_POST_SUCCESS:\r\n            return {\r\n                ...state, areFetching: false,\r\n                items: state.items.map(post => post._id === action.payload._id ? action.payload : post)\r\n            }\r\n        case PostActionTypes.DELETE_POST_SUCCESS:\r\n            return {\r\n                ...state, areFetching: false,\r\n                items: state.items.filter(post => post._id !== action.payload)\r\n            }\r\n\r\n        case PostActionTypes.FETCH_POSTS_FAILURE:\r\n        case PostActionTypes.DELETE_POST_FAILURE:\r\n        case PostActionTypes.EDIT_POST_FAILURE:\r\n        case PostActionTypes.NEW_POST_FAILURE:\r\n            return saveErrorMessage(state, action)\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default postReducer;","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport userReducer from './user/userReducer';\r\nimport chatReducer from './chat/chatReducer';\r\nimport postsReducer from './posts/postsReducer';\r\nimport UserActionTypes from './user/userTypes';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['user', 'chat', 'posts']\r\n};\r\n\r\nconst appReducer = combineReducers({\r\n    user: userReducer,\r\n    chat: chatReducer,\r\n    posts: postsReducer\r\n})\r\nconst rootReducer = (state, action) => {\r\n    // LOGOUT\r\n    if (action.type === UserActionTypes.LOGOUT) {\r\n        storage.removeItem('persist:root')\r\n        state = undefined;\r\n    }\r\n    return appReducer(state, action);\r\n}\r\n\r\nexport default persistReducer(persistConfig, rootReducer);\r\n\r\n\r\n// import userReducer from './user/userReducer';\r\n// import chatReducer from './chat/chatReducer';\r\n// import postsReducer from './posts/postsReducer';\r\n\r\n// const persistConfig = {\r\n//     key: 'root',\r\n//     storage,\r\n//     whitelist: ['user', 'chat', 'posts']\r\n// };\r\n\r\n// const rootReducer = combineReducers({\r\n//     user: userReducer,\r\n//     chat: chatReducer,\r\n//     posts: postsReducer\r\n// })\r\n\r\n// export default persistReducer(persistConfig, rootReducer);\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport { persistStore } from 'redux-persist'\r\n\r\nimport rootReducer from './rootReducer';\r\n\r\nconst middlewares = [\r\n    thunk,\r\n    logger,\r\n];\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\nexport const persistor = persistStore(store);","import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store, persistor } from \"./redux/store\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport Spinner from \"./components/Spinner/Spinner\";\r\n\r\nconst App = React.lazy(() => import(\"./App\"));\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Suspense fallback={<Spinner />}>\r\n      <Provider store={store}>\r\n        <BrowserRouter>\r\n          <PersistGate persistor={persistor}>\r\n            <App />\r\n          </PersistGate>\r\n        </BrowserRouter>\r\n      </Provider>\r\n    </Suspense>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","const PostActionTypes = {\r\n    FETCH_POSTS_START: 'FETCH_POSTS_START',\r\n    FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\r\n    FETCH_POSTS_FAILURE: 'FETCH_POSTS_FAILURE',\r\n\r\n    NEW_POST_START: 'NEW_POST_START',\r\n    NEW_POST_SUCCESS: 'NEW_POST_SUCCESS',\r\n    NEW_POST_FAILURE: 'NEW_POST_FAILURE',\r\n\r\n    EDIT_POST_START: 'EDIT_POST_START',\r\n    EDIT_POST_SUCCESS: 'EDIT_POST_SUCCESS',\r\n    EDIT_POST_FAILURE: 'EDIT_POST_FAILURE',\r\n\r\n    DELETE_POST_START: 'DELETE_POST_START',\r\n    DELETE_POST_SUCCESS: 'DELETE_POST_SUCCESS',\r\n    DELETE_POST_FAILURE: 'DELETE_POST_FAILURE',\r\n};\r\n\r\nexport default PostActionTypes;"],"sourceRoot":""}