{"version":3,"sources":["redux/user/userTypes.js","redux/chat/chatTypes.js","components/Spinner/Spinner.jsx","redux/user/userUtils.js","redux/user/userReducer.js","redux/chat/chatReducer.js","redux/posts/postUtils.js","redux/posts/postsReducer.js","redux/rootReducer.js","redux/store.js","index.js","redux/posts/postsTypes.js"],"names":["UserActionTypes","GUEST_USER","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","UPDATE_PROFILE_START","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAILURE","LOGOUT","ChatActionTypes","NEW_MESSAGE","USER_ONLINE","Spinner","className","saveErrorMessage","state","action","loading","errMessage","payload","INITIAL_STATE","isLoggedIn","username","email","validUntil","guest","password","userReducer","type","chatHistory","usersOnline","chatReducer","areFetching","items","postReducer","PostActionTypes","FETCH_POSTS_START","NEW_POST_START","EDIT_POST_START","DELETE_POST_START","FETCH_POSTS_SUCCESS","NEW_POST_SUCCESS","EDIT_POST_SUCCESS","map","post","_id","DELETE_POST_SUCCESS","filter","FETCH_POSTS_FAILURE","DELETE_POST_FAILURE","EDIT_POST_FAILURE","NEW_POST_FAILURE","persistConfig","key","storage","whitelist","appReducer","combineReducers","user","chat","posts","postsReducer","persistReducer","removeItem","undefined","middlewares","thunk","logger","store","createStore","rootReducer","applyMiddleware","persistor","persistStore","App","React","lazy","ReactDOM","render","StrictMode","fallback","document","getElementById"],"mappings":"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","file":"static/js/main.ec18c514.chunk.js","sourcesContent":["const UserActionTypes = {\n    GUEST_USER: 'GUEST_USER',\n\n    LOGIN_START: 'LOGIN_START',\n    LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n    LOGIN_FAILURE: 'LOGIN_FAILURE',\n\n    UPDATE_PROFILE_START: 'UPDATE_PROFILE_START',\n    UPDATE_PROFILE_SUCCESS: 'UPDATE_PROFILE_SUCCESS',\n    UPDATE_PROFILE_FAILURE: 'UPDATE_PROFILE_FAILURE',\n\n    LOGOUT: 'LOGOUT',\n};\n\nexport default UserActionTypes;","const ChatActionTypes = {\n    NEW_MESSAGE: 'NEW_MESSAGE',\n    USER_ONLINE: 'USER_ONLINE',\n};\n\nexport default ChatActionTypes;","import React from 'react'\nimport './Spinner-styles.scss'\n\nfunction Spinner() {\n    return (\n        <div className=\"loader\">Loading...</div>\n    )\n}\n\nexport default Spinner\n","export function saveErrorMessage(state, action) {\n    return {\n        ...state,\n        loading: false,\n        errMessage: action.payload\n    }\n}","import UserActionTypes from \"./userTypes\";\nimport { saveErrorMessage } from \"./userUtils\";\n\nconst INITIAL_STATE = {\n  isLoggedIn: false,\n  username: null,\n  email: null,\n  loading: false,\n  validUntil: null,\n  errMessage: null,\n  guest: {\n    username: \"GuestUser\",\n    password: 123456,\n  },\n};\n\nfunction userReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case UserActionTypes.LOGIN_START:\n    case UserActionTypes.UPDATE_PROFILE_START:\n      return { ...state, loading: true };\n\n    case UserActionTypes.LOGIN_SUCCESS:\n      return {\n        ...state,\n        errMessage: null,\n        loading: false,\n        isLoggedIn: true,\n        ...action.payload,\n      };\n    case UserActionTypes.UPDATE_PROFILE_SUCCESS:\n      return {\n        ...state,\n        errMessage: null,\n        loading: false,\n        ...action.payload,\n      };\n\n    case UserActionTypes.LOGIN_FAILURE:\n    case UserActionTypes.UPDATE_PROFILE_FAILURE:\n      return saveErrorMessage(state, action);\n\n    case UserActionTypes.LOGOUT:\n    default:\n      return state;\n  }\n}\n\nexport default userReducer;\n","import ChatActionTypes from './chatTypes';\n\nconst INITIAL_STATE = {\n    chatHistory: [],\n    usersOnline: [],\n};\n\nconst chatReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case ChatActionTypes.NEW_MESSAGE:\n            return {\n                ...state,\n                chatHistory: [...state.chatHistory, action.payload]\n            }\n        case ChatActionTypes.USER_ONLINE:\n            return {\n                ...state,\n                usersOnline: action.payload\n            }\n        default:\n            return state\n    }\n};\n\nexport default chatReducer;","export function saveErrorMessage(state, action) {\n    return {\n        ...state,\n        areFetching: false,\n        errMessage: action.payload\n    }\n}","import PostActionTypes from './postsTypes';\nimport { saveErrorMessage } from './postUtils';\n\nconst INITIAL_STATE = {\n    items: [],\n    areFetching: false,\n    errMessage: null\n};\n\nconst postReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case PostActionTypes.FETCH_POSTS_START:\n        case PostActionTypes.NEW_POST_START:\n        case PostActionTypes.EDIT_POST_START:\n        case PostActionTypes.DELETE_POST_START:\n            return {\n                ...state,\n                areFetching: true\n            }\n\n        case PostActionTypes.FETCH_POSTS_SUCCESS:\n            return {\n                ...state, areFetching: false,\n                items: action.payload\n            }\n        case PostActionTypes.NEW_POST_SUCCESS:\n            return {\n                ...state, areFetching: false,\n                items: [action.payload, ...state.items]\n            };\n        case PostActionTypes.EDIT_POST_SUCCESS:\n            return {\n                ...state, areFetching: false,\n                items: state.items.map(post => post._id === action.payload._id ? action.payload : post)\n            }\n        case PostActionTypes.DELETE_POST_SUCCESS:\n            return {\n                ...state, areFetching: false,\n                items: state.items.filter(post => post._id !== action.payload)\n            }\n\n        case PostActionTypes.FETCH_POSTS_FAILURE:\n        case PostActionTypes.DELETE_POST_FAILURE:\n        case PostActionTypes.EDIT_POST_FAILURE:\n        case PostActionTypes.NEW_POST_FAILURE:\n            return saveErrorMessage(state, action)\n        default:\n            return state;\n    }\n};\n\nexport default postReducer;","import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport userReducer from './user/userReducer';\nimport chatReducer from './chat/chatReducer';\nimport postsReducer from './posts/postsReducer';\nimport UserActionTypes from './user/userTypes';\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['user', 'chat', 'posts']\n};\n\nconst appReducer = combineReducers({\n    user: userReducer,\n    chat: chatReducer,\n    posts: postsReducer\n})\nconst rootReducer = (state, action) => {\n    // LOGOUT\n    if (action.type === UserActionTypes.LOGOUT) {\n        storage.removeItem('persist:root')\n        state = undefined;\n    }\n    return appReducer(state, action);\n}\n\nexport default persistReducer(persistConfig, rootReducer);\n\n\n// import userReducer from './user/userReducer';\n// import chatReducer from './chat/chatReducer';\n// import postsReducer from './posts/postsReducer';\n\n// const persistConfig = {\n//     key: 'root',\n//     storage,\n//     whitelist: ['user', 'chat', 'posts']\n// };\n\n// const rootReducer = combineReducers({\n//     user: userReducer,\n//     chat: chatReducer,\n//     posts: postsReducer\n// })\n\n// export default persistReducer(persistConfig, rootReducer);\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { persistStore } from 'redux-persist'\n\nimport rootReducer from './rootReducer';\n\nconst middlewares = [\n    thunk,\n    logger,\n];\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\nexport const persistor = persistStore(store);","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport Spinner from \"./components/Spinner/Spinner\";\n\nconst App = React.lazy(() => import(\"./App\"));\nReactDOM.render(\n  <React.StrictMode>\n    <Suspense fallback={<Spinner />}>\n      <Provider store={store}>\n        <BrowserRouter>\n          <PersistGate persistor={persistor}>\n            <App />\n          </PersistGate>\n        </BrowserRouter>\n      </Provider>\n    </Suspense>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","const PostActionTypes = {\n    FETCH_POSTS_START: 'FETCH_POSTS_START',\n    FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\n    FETCH_POSTS_FAILURE: 'FETCH_POSTS_FAILURE',\n\n    NEW_POST_START: 'NEW_POST_START',\n    NEW_POST_SUCCESS: 'NEW_POST_SUCCESS',\n    NEW_POST_FAILURE: 'NEW_POST_FAILURE',\n\n    EDIT_POST_START: 'EDIT_POST_START',\n    EDIT_POST_SUCCESS: 'EDIT_POST_SUCCESS',\n    EDIT_POST_FAILURE: 'EDIT_POST_FAILURE',\n\n    DELETE_POST_START: 'DELETE_POST_START',\n    DELETE_POST_SUCCESS: 'DELETE_POST_SUCCESS',\n    DELETE_POST_FAILURE: 'DELETE_POST_FAILURE',\n};\n\nexport default PostActionTypes;"],"sourceRoot":""}