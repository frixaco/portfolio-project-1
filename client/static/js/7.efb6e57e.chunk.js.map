{"version":3,"sources":["components/Chat/Chat.jsx","redux/chat/chatActions.js","components/Posts/Posts.jsx","components/Navbars/HomeNavBar.jsx","pages/Home/Home.jsx"],"names":["connect","username","user","chat","usersOnline","chatHistory","newMessage","message","type","ChatActionTypes","NEW_MESSAGE","payload","userOnline","USER_ONLINE","React","useState","messageValue","setMessageValue","messagesRef","useRef","useEffect","socket","on","off","emit","current","scrollTo","class","className","length","ref","map","idx","key","style","fontSize","color","text","Date","toLocaleString","placeholder","value","onChange","e","target","onKeyDown","onClick","i","ListPosts","lazy","Modal","setAppElement","modalStyles","overlay","position","top","left","right","bottom","backgroundColor","content","posts","items","areFetching","fetchPostsAsync","createPostAsync","searchField","setSearchField","modalIsOpen","setIsOpen","title","imglink","postForm","setPostForm","pexelLoading","setPexelLoading","closeModal","fillForm","name","pickRandomImage","a","min","max","Math","ceil","floor","random","err","console","log","filteredPosts","filter","post","toLowerCase","includes","fallback","Spinner","isOpen","onRequestClose","contentLabel","id","htmlFor","cols","rows","width","src","alt","marginTop","newPost","author","date","state","logoutUser","to","href","rel","Home"],"mappings":"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","file":"static/js/7.efb6e57e.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { newMessage, userOnline } from \"../../redux/chat/chatActions\";\r\nimport socket from \"../../initSocket\";\r\n\r\nfunction Chat({ usersOnline, chatHistory, username, newMessage, userOnline }) {\r\n  const [messageValue, setMessageValue] = React.useState(\"\");\r\n  const messagesRef = React.useRef();\r\n\r\n  const sendMsgOnEnter = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      if (messageValue !== \"\") {\r\n        socket.emit(\"new_message\", {\r\n          username,\r\n          text: messageValue,\r\n        });\r\n      }\r\n      setMessageValue(\"\");\r\n    }\r\n  };\r\n\r\n  const onSendMessage = () => {\r\n    if (messageValue !== \"\") {\r\n      socket.emit(\"new_message\", {\r\n        username,\r\n        text: messageValue,\r\n      });\r\n    }\r\n    setMessageValue(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket.on(\"update_users_online\", (usersOnline) => {\r\n      userOnline(usersOnline);\r\n    });\r\n    socket.on(\"update_chat_history\", (message) => {\r\n      newMessage(message);\r\n    });\r\n    return () => {\r\n      socket.off(\"update_users_online\");\r\n      socket.off(\"update_chat_history\");\r\n    };\r\n  }, [userOnline, newMessage]);\r\n\r\n  useEffect(() => {\r\n    if (username) {\r\n      socket.emit(\"new_online_user\", username);\r\n    }\r\n  }, [username]);\r\n\r\n  useEffect(() => {\r\n    messagesRef.current.scrollTo(0, 99999);\r\n  }, [chatHistory]);\r\n\r\n  return (\r\n    <section class=\"chat-section\">\r\n      <div className=\"chat-header\">\r\n        <h4>Live global chat</h4>\r\n        <p>\r\n          Online: <span>{usersOnline.length}</span>\r\n        </p>\r\n      </div>\r\n      {/* USERS ONLINE: WHO JOINED AND WHO LEFT */}\r\n      <div ref={messagesRef} class=\"chat-history\">\r\n        {chatHistory.map((message, idx) => (\r\n          <div\r\n            key={idx}\r\n            className={`message ${message.username === username ? \"my\" : \"\"}`}\r\n          >\r\n            <p\r\n              style={{ fontSize: \"0.8rem\", color: \"#6e93d6\" }}\r\n            >{`${message.username}`}</p>\r\n            <p>{`${message.text}`}</p>\r\n            <span>{new Date().toLocaleString}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div class=\"send-message\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type your message\"\r\n          value={messageValue}\r\n          onChange={(e) => setMessageValue(e.target.value)}\r\n          onKeyDown={sendMsgOnEnter}\r\n        />\r\n        <i onClick={onSendMessage} class=\"fas fa-paper-plane\"></i>\r\n      </div>\r\n      <div className=\"users-online\">\r\n        {usersOnline.map((user, i) => (\r\n          <span>{user}</span>\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  user: { username },\r\n  chat: { usersOnline, chatHistory },\r\n}) => ({\r\n  usersOnline,\r\n  chatHistory,\r\n  username,\r\n});\r\n\r\nexport default connect(mapStateToProps, { newMessage, userOnline })(Chat);\r\n","import ChatActionTypes from './chatTypes';\r\n\r\nexport const newMessage = message => ({\r\n    type: ChatActionTypes.NEW_MESSAGE,\r\n    payload: message,\r\n});\r\n\r\nexport const userOnline = usersOnline => ({\r\n    type: ChatActionTypes.USER_ONLINE,\r\n    payload: usersOnline,\r\n});","import React, { Suspense, useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Modal from \"react-modal\";\r\n\r\nimport {\r\n  createPostAsync,\r\n  fetchPostsAsync,\r\n} from \"../../redux/posts/postsActions\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\n\r\nconst ListPosts = React.lazy(() => import(\"./ListPosts\"));\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nconst modalStyles = {\r\n  overlay: {\r\n    position: \"fixed\",\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    backgroundColor: \"rgba(255, 255, 255, 0.75)\",\r\n  },\r\n  content: {\r\n    backgroundColor: \"transparent\",\r\n  },\r\n};\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction Posts({ username, createPostAsync, fetchPostsAsync, items }) {\r\n  const [searchField, setSearchField] = useState(\"\");\r\n  const [modalIsOpen, setIsOpen] = useState(false);\r\n  const [postForm, setPostForm] = useState({\r\n    title: \"\",\r\n    content: \"\",\r\n    imglink: \"\",\r\n  });\r\n  const [pexelLoading, setPexelLoading] = useState(false);\r\n\r\n  function openModal() {\r\n    setIsOpen(true);\r\n  }\r\n  function closeModal() {\r\n    setPostForm({ title: \"\", content: \"\", imglink: \"\" });\r\n    setIsOpen(false);\r\n  }\r\n  const handleSave = () => {\r\n    const newPost = {\r\n      author: username,\r\n      title: postForm.title,\r\n      content: postForm.content,\r\n      imglink: postForm.imglink,\r\n      date: new Date().toLocaleString(),\r\n    };\r\n    createPostAsync(newPost);\r\n    setPostForm({ title: \"\", content: \"\", imglink: \"\" });\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const fillForm = (e) =>\r\n    setPostForm({ ...postForm, [e.target.name]: e.target.value });\r\n\r\n  const pickRandomImage = async () => {\r\n    try {\r\n      setPexelLoading(true);\r\n      setPostForm({\r\n        ...postForm,\r\n        imglink: `https://picsum.photos/id/${getRandomInt(1, 200)}/500/600`,\r\n      });\r\n      setPexelLoading(false);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (username) {\r\n      fetchPostsAsync();\r\n    }\r\n  }, [username, fetchPostsAsync]);\r\n\r\n  const filteredPosts = items.filter((post) =>\r\n    post.title.toLowerCase().includes(searchField.toLowerCase())\r\n  );\r\n  return (\r\n    <section className=\"posts-section\">\r\n      <div className=\"menu\">\r\n        <div className=\"new-post\">\r\n          <button onClick={openModal}>NEW POST</button>\r\n        </div>\r\n        <div className=\"search-post\">\r\n          <input\r\n            value={searchField}\r\n            onChange={(e) => setSearchField(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"Search posts by title\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <Suspense fallback={<Spinner />}>\r\n        <ListPosts filteredPosts={filteredPosts} />\r\n      </Suspense>\r\n\r\n      <Modal\r\n        isOpen={modalIsOpen}\r\n        onRequestClose={closeModal}\r\n        contentLabel=\"modal\"\r\n        style={modalStyles}\r\n      >\r\n        <div id=\"modal\">\r\n          <label htmlFor=\"new-title\">Title</label>\r\n          <input\r\n            value={postForm.title}\r\n            onChange={fillForm}\r\n            name=\"title\"\r\n            placeholder=\"Title of your post\"\r\n            id=\"new-title\"\r\n            type=\"text\"\r\n          />\r\n          <label htmlFor=\"new-title\">Main body</label>\r\n          <textarea\r\n            value={postForm.content}\r\n            onChange={fillForm}\r\n            name=\"content\"\r\n            placeholder=\"Content of your post\"\r\n            id=\"post-content\"\r\n            cols=\"20\"\r\n            rows=\"4\"\r\n          ></textarea>\r\n          <button onClick={pickRandomImage}>Pick random image</button>\r\n          {pexelLoading ? (\r\n            <Spinner />\r\n          ) : !postForm.imglink ? null : (\r\n            <img\r\n              width=\"300\"\r\n              className=\"imglink\"\r\n              src={postForm.imglink}\r\n              alt=\"\"\r\n            />\r\n          )}\r\n          <div class=\"modal-btns\" style={{ marginTop: 15 }}>\r\n            <button onClick={closeModal}>Cancel</button>\r\n            <button onClick={handleSave}>SAVE</button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </section>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({\r\n  posts: { items, areFetching },\r\n  user: { username },\r\n}) => ({ items, username, areFetching });\r\n\r\nexport default connect(mapStateToProps, { fetchPostsAsync, createPostAsync })(\r\n  Posts\r\n);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { logoutUser } from \"../../redux/user/userActions\";\r\nimport socket from \"../../initSocket\";\r\n\r\nfunction HomeNavBar({ username, logoutUser }) {\r\n  const handleLogout = () => {\r\n    socket.emit(\"user_disconnected\", username);\r\n    logoutUser();\r\n  };\r\n\r\n  return (\r\n    <nav>\r\n      <div className=\"left-nav\">\r\n        <Link to={`/profile`}>\r\n          <div className=\"icon\">\r\n            <i className=\"fas fa-user-circle\"></i>\r\n          </div>\r\n        </Link>\r\n        <h4>Welcome, {username}!</h4>\r\n      </div>\r\n      <div className=\"right-nav\">\r\n        <a\r\n          target=\"_blank\"\r\n          href=\"https://github.com/frixaco/post-n-chat\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <div className=\"icon\">\r\n            <i className=\"fab fa-github\"></i>\r\n          </div>\r\n        </a>\r\n        <div onClick={handleLogout} className=\"icon\">\r\n          <i className=\"fas fa-sign-out-alt\"></i>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ username: state.user.username });\r\n\r\nexport default connect(mapStateToProps, { logoutUser })(HomeNavBar);\r\n","import React from \"react\";\r\n\r\nimport Chat from \"../../components/Chat/Chat\";\r\nimport Posts from \"../../components/Posts/Posts\";\r\nimport HomeNavBar from \"../../components/Navbars/HomeNavBar\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div class=\"home-page-container\">\r\n      <HomeNavBar />\r\n      <main>\r\n        <Posts />\r\n        <Chat />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n"],"sourceRoot":""}