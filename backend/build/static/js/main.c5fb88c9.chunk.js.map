{"version":3,"sources":["redux/user/userTypes.js","redux/user/userActions.js","redux/chat/chatTypes.js","initSocket.js","components/Chat/Chat.jsx","redux/chat/chatActions.js","redux/posts/postsTypes.js","components/Posts/NewPostModal.jsx","redux/posts/postsActions.js","components/Posts/Post.jsx","components/Posts/ListPosts.jsx","components/Posts/Posts.jsx","components/Navbars/HomeNavBar.jsx","pages/Home/Home.jsx","components/Navbars/ProfileNavBar.jsx","components/MyPosts/MyPosts.jsx","pages/Profile/Profile.jsx","components/Login/Login.jsx","components/Register/Register.jsx","pages/LoginRegister/LoginRegister.jsx","App.js","redux/user/userUtils.js","redux/user/userReducer.js","redux/chat/chatReducer.js","redux/posts/postUtils.js","redux/posts/postsReducer.js","redux/rootReducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["UserActionTypes","GUEST_USER","LOGIN_START","LOGIN_SUCCESS","LOGIN_FAILURE","UPDATE_PROFILE_START","UPDATE_PROFILE_SUCCESS","UPDATE_PROFILE_FAILURE","LOGOUT","loginUserAsync","user","dispatch","type","Axios","post","then","response","payload","loginUserSuccess","data","catch","err","errMessage","message","logoutUser","ChatActionTypes","NEW_MESSAGE","USER_ONLINE","socket","io","connect","username","chat","usersOnline","chatHistory","newMessage","userOnline","React","useState","messageValue","setMessageValue","messagesRef","useRef","useEffect","on","off","emit","current","scrollTo","className","ref","map","idx","key","text","value","onChange","e","target","onClick","length","name","index","PostActionTypes","FETCH_POSTS_START","FETCH_POSTS_SUCCESS","FETCH_POSTS_FAILURE","NEW_POST_START","NEW_POST_SUCCESS","NEW_POST_FAILURE","EDIT_POST_START","EDIT_POST_SUCCESS","EDIT_POST_FAILURE","DELETE_POST_START","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","createPostAsync","createPostSuccess","title","content","keyword","imglink","postForm","setPostForm","fillForm","pickPexel","a","get","headers","link","photos","src","medium","console","log","id","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","forhtml","placeholder","alt","width","height","newPost","author","date","Date","toLocaleString","Post","onEdit","deletePost","data-toggle","data-target","show","_id","style","backgroundImage","backgroundRepeat","backgroundPosition","editPostAsync","editPostSuccess","deletePostAsync","postid","delete","deletePostSuccess","filteredPosts","editMode","setEditMode","editTitle","editContent","setNewPost","handleEdit","newTitle","newContent","editedPost","items","posts","fetchPostsAsync","reverse","searchField","setSearchField","isActive","filter","toLowerCase","includes","flex","to","fontSize","Home","ProfileNavBar","marginRight","MyPosts","loading","myposts","email","areFetching","updateUserAsync","updateUserSuccess","newUsername","setNewUsername","newEmail","setNewEmail","newPassword","setNewPassword","disabled","password","form","setForm","toast","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","transition","Slide","newestOnTop","rtl","pauseOnFocusLoss","transport","registerUser","success","guest","margin","isLoggedIn","validUntil","currTime","getTime","exact","path","component","saveErrorMessage","state","action","INITIAL_STATE","userReducer","chatReducer","postReducer","persistConfig","storage","whitelist","appReducer","combineReducers","postsReducer","persistReducer","removeItem","middlewares","thunk","logger","store","createStore","rootReducer","applyMiddleware","persistor","persistStore","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"yLAceA,EAdS,CACpBC,WAAY,aAEZC,YAAa,cACbC,cAAe,gBACfC,cAAe,gBAEfC,qBAAsB,uBACtBC,uBAAwB,yBACxBC,uBAAwB,yBAExBC,OAAQ,U,iBCECC,EAAiB,SAAAC,GAAI,OAAI,SAAAC,GAClCA,EAViC,CAAEC,KAAMZ,EAAgBE,cAWzDW,IAAMC,KAAK,cAAeJ,GACrBK,MAAK,SAAAC,GAAQ,OAAIL,EAXM,SAAAD,GAAI,MAAK,CACrCE,KAAMZ,EAAgBG,cACtBc,QAASP,GASsBQ,CAAiBF,EAASG,UACpDC,OAAM,SAAAC,GAAG,OAAIV,GARUW,EAQgBD,EAAIE,QARL,CAC3CX,KAAMZ,EAAgBI,cACtBa,QAASK,KAFmB,IAAAA,OA6BnBE,EAAa,iBAAO,CAAEZ,KAAMZ,EAAgBQ,S,cCjC1CiB,EALS,CACpBC,YAAa,cACbC,YAAa,e,QCEFC,E,OAFAC,EAAGC,QAAQ,IAAK,CAAE,6BAA6B,IC2E9D,IAIeA,eAJS,SAAC,GAAD,IAAWC,EAAX,EAAGrB,KAAQqB,SAAX,IAAuBC,KAAvB,MAAiE,CACrFC,YADoB,EAA+BA,YACtCC,YADO,EAA4CA,YACtCH,cAGU,CAAEI,WC/EhB,SAAAZ,GAAO,MAAK,CAClCX,KAAMa,EAAgBC,YACtBT,QAASM,ID6EyCa,WC1E5B,SAAAH,GAAW,MAAK,CACtCrB,KAAMa,EAAgBE,YACtBV,QAASgB,KDwEEH,EA3Ef,YAA+E,IAA/DG,EAA8D,EAA9DA,YAAaC,EAAiD,EAAjDA,YAAaH,EAAoC,EAApCA,SAAUI,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAAc,EAClCC,IAAMC,SAAS,IADmB,mBACnEC,EADmE,KACrDC,EADqD,KAEpEC,EAAcJ,IAAMK,SAmC1B,OAvBAC,qBAAU,WAON,OANAf,EAAOgB,GAAG,uBAAuB,SAAAX,GAC7BG,EAAWH,MAEfL,EAAOgB,GAAG,uBAAuB,SAAArB,GAC7BY,EAAWZ,MAER,WACHK,EAAOiB,IAAI,uBACXjB,EAAOiB,IAAI,0BAEhB,IAEHF,qBAAU,WACFZ,GACAH,EAAOkB,KAAK,kBAAmBf,KAEpC,CAACA,IAEJY,qBAAU,WACNF,EAAYM,QAAQC,SAAS,EAAG,SACjC,CAACd,IAGA,yBAAKe,UAAU,QACX,wBAAIA,UAAU,eAAd,wBACA,0BAAMA,UAAU,YAChB,yBAAKA,UAAU,iBACX,yBAAKC,IAAKT,EAAaQ,UAAU,YAC5Bf,EAAYiB,KAAI,SAAC5B,EAAS6B,GAAV,OACb,yBAAKC,IAAKD,EAAKH,UAAS,kBAAa1B,EAAQQ,WAAaA,EAAW,KAAO,KACxE,0BAAMkB,UAAU,8BAA8B1B,EAAQQ,UACtD,2BAAIR,EAAQ+B,WAIxB,yBAAKL,UAAU,UACX,2BACIM,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAAgBiB,EAAEC,OAAOH,QAC1CN,UAAU,YAEd,4BAAQU,QApDF,WACG,KAAjBpB,GACAX,EAAOkB,KAAK,cAAe,CACvBf,WACAuB,KAAMf,IAGdC,EAAgB,KA6C4B5B,KAAK,SAASqC,UAAU,qBAAxD,SAIJ,yBAAKA,UAAU,cACX,sCAAYhB,EAAY2B,OAAxB,MACC3B,EAAYkB,KAAI,SAACU,EAAMC,GAAP,OACb,0BAAMT,IAAKQ,EAAOC,EAAOb,UAAU,4BAA4BY,YEnDxEE,EAlBS,CACpBC,kBAAmB,oBACnBC,oBAAqB,sBACrBC,oBAAqB,sBAErBC,eAAgB,iBAChBC,iBAAkB,mBAClBC,iBAAkB,mBAElBC,gBAAiB,kBACjBC,kBAAmB,oBACnBC,kBAAmB,oBAEnBC,kBAAmB,oBACnBC,oBAAqB,sBACrBC,oBAAqB,uB,gCC+DzB,IAEe7C,eAFS,SAAC,GAAD,MAA6B,CAAEC,SAA/B,EAAGrB,KAAQqB,YAEK,CAAE6C,gBCnEX,SAAA9D,GAAI,OAAI,SAAAH,GACnCA,EAVkC,CAAEC,KAAMmD,EAAgBI,iBAW1DtD,IAAMC,KAAK,QAASA,GACfC,MAAK,SAAAC,GACFL,EAZqB,SAAAG,GAAI,MAAK,CACtCF,KAAMmD,EAAgBK,iBACtBnD,QAASH,GAUQ+D,CAAkB7D,EAASG,KAAKL,UAC1CM,OAAM,SAAAC,GAAG,OAAIV,GATSW,EASkBD,EAAIE,QATP,CAC5CX,KAAMmD,EAAgBM,iBACtBpD,QAASK,KAFoB,IAAAA,QDuElBQ,EA1Ef,YAAsD,IAA9BC,EAA6B,EAA7BA,SAAU6C,EAAmB,EAAnBA,gBAAmB,EACjBtC,mBAAS,CACrCwC,MAAO,GAAIC,QAAS,GAAIC,QAAS,GAAIC,QAAS,KAFD,mBAC1CC,EAD0C,KAChCC,EADgC,KAK3CC,EAAW,SAAA3B,GAAC,OAAI0B,EAAY,2BAAKD,GAAN,kBAAiBzB,EAAEC,OAAOG,KAAOJ,EAAEC,OAAOH,UACrE8B,EAAS,uCAAG,8BAAAC,EAAA,+EAGazE,IAAM0E,IAAN,iDAAoDL,EAASF,QAA7D,eAAmF,CACtGQ,QAAS,CACL,cAAiB,8DALf,OAGJxE,EAHI,OAQJyE,EAAOzE,EAASG,KAAKuE,OAAO,GAAGC,IAAIC,OACzCT,EAAY,2BAAKD,GAAN,IAAgBD,QAASQ,KAT1B,gDAWVI,QAAQC,IAAI,KAAIvE,SAXN,yDAAH,qDA0Bf,OACI,yBAAK0B,UAAU,aAAa8C,GAAG,eAAeC,SAAS,KAAKC,KAAK,SAASC,kBAAgB,oBAAoBC,cAAY,QACtH,yBAAKlD,UAAU,eAAegD,KAAK,YAC/B,yBAAKhD,UAAU,iBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,cAAc8C,GAAG,qBAA/B,qBACA,4BAAQnF,KAAK,SAASqC,UAAU,QAAQmD,eAAa,QAAQC,aAAW,SACpE,0BAAMF,cAAY,QAAlB,UAGR,yBAAKlD,UAAU,cACX,yBAAKA,UAAU,cACX,2BAAOqD,QAAQ,SAAf,SACA,2BAAO/C,MAAO2B,EAASJ,MAAOtB,SAAU4B,EAAUvB,KAAK,QAAQjD,KAAK,OAAOqC,UAAU,eAAe8C,GAAG,QAAQQ,YAAY,gCAE/H,yBAAKtD,UAAU,cACX,2BAAOqD,QAAQ,WAAf,gBACA,2BAAO/C,MAAO2B,EAASH,QAASvB,SAAU4B,EAAUvB,KAAK,UAAUjD,KAAK,OAAOqC,UAAU,eAAe8C,GAAG,UAAUQ,YAAY,8BAErI,2BAAOD,QAAQ,SAAf,mCACA,yBAAKrD,UAAU,eACX,2BAAOM,MAAO2B,EAASF,QAASxB,SAAU4B,EAAUvB,KAAK,UAAUjD,KAAK,OAAOqC,UAAU,eAAe8C,GAAG,QAAQQ,YAAY,kBAC/H,yBAAKtD,UAAU,sBACX,4BAAQU,QAAS0B,EAAWpC,UAAU,4BAA4BrC,KAAK,UAAvE,uBAGc,KAArBsE,EAASD,QAAiB,KACvB,yBAAKhC,UAAU,UAAU0C,IAAKT,EAASD,QAASuB,IAAI,QAAQC,MAAM,MAAMC,OAAO,SAGvF,yBAAKzD,UAAU,+CACX,4BAAQU,QA3Cb,kBAAMwB,EAAY,CAAEL,MAAO,GAAIC,QAAS,GAAIC,QAAS,GAAIC,QAAS,MA2CpCrE,KAAK,SAASqC,UAAU,4BAA4BmD,eAAa,SAA1F,UACA,4BAAQzC,QA3CH,WACrB,IAAMgD,EAAU,CACZC,OAAQ7E,EACR+C,MAAOI,EAASJ,MAChBC,QAASG,EAASH,QAClBE,QAASC,EAASD,QAClB4B,MAAM,IAAIC,MAAOC,kBAErBnC,EAAgB+B,IAmCmC/F,KAAK,SAASqC,UAAU,oBAAoBmD,eAAa,SAA5F,eErCTY,MA/Bf,YAA2D,IAA3CjF,EAA0C,EAA1CA,SAAUjB,EAAgC,EAAhCA,KAAMmG,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,WAAYnB,EAAM,EAANA,GAChD,OACI,yBAAK9C,UAAU,4GACX,yBAAKA,UAAU,8CACX,4BAAQA,UAAU,sCAAsCnC,EAAK8F,QAC7D,wBAAI3D,UAAU,QAAQnC,EAAKgE,OAC3B,2BAAO7B,UAAU,2BAA2BnC,EAAK+F,MACjD,uBAAG5D,UAAU,WACRnC,EAAKiE,SAGV,yBAAK9B,UAAU,kDAAf,gBACCnC,EAAK8F,SAAW7E,EACb,yBAAKkB,UAAU,kCACX,4BAAQkE,cAAY,YAAYC,cAAY,aAAazD,QAAS,kBAAMsD,EAAO,CAAEI,MAAM,EAAMtB,QAAO9C,UAAU,6BAA9G,QACA,4BAAQU,QAAS,kBAAMuD,EAAWpG,EAAKwG,MAAMrE,UAAU,qBAAvD,WAEJ,MAER,yBAAKA,UAAU,6BACXsE,MAAO,CACHC,gBAAgB,QAAD,OAAU1G,EAAKmE,QAAf,MACfwC,iBAAkB,YAClBC,mBAAoB,SACpBjB,MAAO,IAAKC,OAAQ,SC4BxC,IAEe5E,eAFS,SAAC,GAAD,MAA6B,CAAEC,SAA/B,EAAGrB,KAAQqB,YAEK,CAAE4F,cFJb,SAAA7G,GAAI,OAAI,SAAAH,GACjCA,EAVgC,CAAEC,KAAMmD,EAAgBO,kBAWxDzD,IAAMC,KAAN,gBAAoBA,EAAKwG,KAAOxG,GAC3BC,MAAK,SAAAC,GAAQ,OAAIL,EAXK,SAAAG,GAAI,MAAK,CACpCF,KAAMmD,EAAgBQ,kBACtBtD,QAASH,GASsB8G,CAAgB5G,EAASG,KAAKL,UACxDM,OAAM,SAAAC,GAAG,OAAIV,GARSW,EAQgBD,EAAIE,QARL,CAC1CX,KAAMmD,EAAgBS,kBACtBvD,QAASK,KAFkB,IAAAA,OEQ0BuG,gBFa1B,SAAAC,GAAM,OAAI,SAAAnH,GACrCA,EAVkC,CAAEC,KAAMmD,EAAgBU,oBAW1D5D,IAAMkH,OAAN,gBAAsBD,IACjB/G,MAAK,kBAAMJ,EAXa,SAAAmH,GAAM,MAAK,CACxClH,KAAMmD,EAAgBW,oBACtBzD,QAAS6G,GASgBE,CAAkBF,OACtC1G,OAAM,SAAAC,GAAG,OAAIV,GARWW,EAQgBD,EAAIE,QARL,CAC5CX,KAAMmD,EAAgBY,oBACtB1D,QAASK,KAFoB,IAAAA,QETlBQ,EAnDf,YAAiF,IAA5DC,EAA2D,EAA3DA,SAAUkG,EAAiD,EAAjDA,cAAeN,EAAkC,EAAlCA,cAAeE,EAAmB,EAAnBA,gBAAmB,EAC5CvF,mBAAS,CAAE+E,MAAM,EAAOtB,GAAI,OADgB,mBACrEmC,EADqE,KAC3DC,EAD2D,OAE9C7F,mBAAS,CAAE8F,UAAW,GAAIC,YAAa,KAFO,mBAErE1B,EAFqE,KAE5D2B,EAF4D,KAItEC,EAAa,SAAA9E,GAAC,OAAI6E,EAAW,2BAAK3B,GAAN,kBAAgBlD,EAAEC,OAAOG,KAAOJ,EAAEC,OAAOH,UAkB3E,OACI,yBAAKN,UAAU,mBACViF,EAASb,MACN,yBAAKpE,UAAU,2BACX,yBAAKA,UAAU,eACX,2BAAOA,UAAU,aAAaM,MAAOoD,EAAQ6B,SAAUhF,SAAU+E,EAAYhC,YAAW,0BAAqB0B,EAAcC,EAASnC,IAAIjB,OAASjB,KAAK,YAAYkC,GAAG,cACrK,2BAAO9C,UAAU,aAAaM,MAAOoD,EAAQ8B,WAAYjF,SAAU+E,EAAYhC,YAAW,0BAAqB0B,EAAcC,EAASnC,IAAIhB,SAAWlB,KAAK,cAAckC,GAAG,iBAE/K,yBAAK9C,UAAU,+CACX,4BAAQA,UAAU,4BAA4BU,QAd/C,WACfwE,EAAY,CAAEd,MAAM,EAAOtB,GAAI,OAC/BuC,EAAW,CAAEF,UAAW,GAAIC,YAAa,OAYzB,UACA,4BAAQpF,UAAU,oBAAoBU,QA3BjC,WACrB,IAAM+E,EAAU,2BACTT,EAAcC,EAASnC,KADd,IAEZjB,MAAO6B,EAAQyB,UACfrD,QAAS4B,EAAQ0B,YACjBxB,MAAM,IAAIC,MAAOC,mBAErBY,EAAce,GACdP,EAAY,CAAEd,MAAM,EAAOtB,GAAI,OAC/BuC,EAAW,CAAEF,UAAW,GAAIC,YAAa,OAkBzB,UAIXJ,EAAc9E,KAAI,SAACrC,EAAMsC,GAAP,OACf,kBAAC,EAAD,CACIrB,SAAUA,EACVjB,KAAMA,EACNoG,WAAYW,EACZZ,OAAQkB,EACRpC,GAAI3C,EACJC,IAAKD,WCLzB,IAEetB,eAFS,SAAC,GAAD,MAA+C,CAAE6G,MAAjD,EAAGC,MAASD,MAA4C5G,SAAxD,EAAqBrB,KAAQqB,YAEb,CAAE8G,gBHdX,kBAAM,SAAAlI,GACjCA,EAVkC,CAAEC,KAAMmD,EAAgBC,oBAW1DnD,IAAM0E,IAAI,SACLxE,MAAK,SAAAC,GAXmB,IAAA4H,EAYrB/C,QAAQC,IAAI9E,GACZ6E,QAAQC,IAAI9E,EAASG,MACrBR,GAdqBiI,EAcM5H,EAASG,KAAKyH,MAAME,UAdhB,CACvClI,KAAMmD,EAAgBE,oBACtBhD,QAAS2H,QAcJxH,OAAM,SAAAC,GAAG,OAAIV,GAZWW,EAYgBD,EAAIE,QAZL,CAC5CX,KAAMmD,EAAgBG,oBACtBjD,QAASK,KAFoB,IAAAA,QGkBlBQ,EAtCf,YAAsD,IAArCC,EAAoC,EAApCA,SAAU8G,EAA0B,EAA1BA,gBAAiBF,EAAS,EAATA,MAAS,EACXrG,mBAAS,IADE,mBAC1CyG,EAD0C,KAC7BC,EAD6B,KAGjDrG,qBAAU,WACN,IAAIsG,GAAW,EAIf,OAHIA,GAAYlH,GACZ8G,IAEG,WAAQI,GAAW,KAC3B,CAAClH,EAAU8G,IAEd,IAAMZ,EAAgBU,EAAMO,QAAO,SAAApI,GAAI,OAAIA,EAAKgE,MAAMqE,cAAcC,SAASL,EAAYI,kBACzF,OACI,yBAAKlG,UAAU,SACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,4CAA4CkE,cAAY,QAAQC,cAAY,iBACvF,uBAAGnE,UAAU,6BACb,0CAGJ,yBAAKA,UAAU,6BAA6BsE,MAAO,CAAE8B,KAAM,IACvD,2BACI9F,MAAOwF,EACPvF,SAAU,SAAAC,GAAC,OAAIuF,EAAevF,EAAEC,OAAOH,QACvCgD,YAAY,kBACZ3F,KAAK,OACLqC,UAAU,eACVoD,aAAW,mBAGvB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAW4B,cAAeA,Q,QCNtC,IAEenG,eAFS,SAAC,GAAD,MAA6B,CAAEC,SAA/B,EAAGrB,KAAQqB,YAEK,CAAEP,cAA3BM,EA3Bf,YAA+C,IAAzBC,EAAwB,EAAxBA,SAAUP,EAAc,EAAdA,WAO5B,OACI,yBAAKyB,UAAU,YACX,kBAAC,IAAD,CAAMA,UAAU,wCAAwCqG,GAAE,WAAMvH,IAC5D,uBAAGwF,MAAO,CAAEgC,SAAU,IAAOtG,UAAU,2BACvC,8CAEJ,yBAAKA,UAAU,eACX,yBAAK0C,IAAI,wCAAwCc,MAAM,KAAKC,OAAO,KAAKF,IAAI,YAC3EzE,GAEL,yBAAK4B,QAfQ,WACjB/B,EAAOkB,KAAK,oBAAqBf,GACjCP,KAagCyB,UAAU,+CAClC,uCACA,uBAAGsE,MAAO,CAAEgC,SAAU,IAAOtG,UAAU,mCCRxCuG,MAZf,WACI,OACI,yBAAKvG,UAAU,kBACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,wBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,SCODwG,MAhBf,YAAsC,IAAb1H,EAAY,EAAZA,SACrB,OACI,4BAAQkB,UAAU,kDACd,kBAAC,IAAD,CAAMA,UAAU,gCAAgCqG,GAAG,KAC/C,uBAAG/B,MAAO,CAAEgC,SAAU,GAAIG,YAAa,IAAMzG,UAAU,6BACvD,2CAEJ,4BAAKlB,EAAL,cACA,4BAAQkB,UAAU,yCACd,uBAAGsE,MAAO,CAAEgC,SAAU,GAAIG,YAAa,IAAMzG,UAAU,sBAD3D,oBCKG0G,MAdf,YAAwC,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QACxB,OACI,6BACI,wCACCD,EAAU,sDAAkC,oCAEtB,IAAnBC,EAAQjG,QAAgBiG,EAAQ1G,KAAI,SAACrC,EAAMsC,GAAP,OAChC,uBAAGC,IAAKD,GAAR,UAAiBtC,EAAK8F,OAAtB,aAAiC9F,EAAKgE,MAAtC,aAAgDhE,EAAKiE,eC0GzE,IAOejD,eAPS,SAAC,GAAD,QAAGpB,KAAQqB,EAAX,EAAWA,SAAU+H,EAArB,EAAqBA,MAArB,IAA8BlB,MAASD,EAAvC,EAAuCA,MAAOoB,EAA9C,EAA8CA,YAA9C,MAAmE,CACvFF,QAASlB,EAAMO,QAAO,SAAApI,GAAI,OAAIA,EAAK8F,SAAW7E,KAC9CA,WACA+H,QACAC,iBAGoC,CAAEC,gBf5FX,SAAAtJ,GAAI,OAAI,SAAAC,GACnCA,EAVkC,CAAEC,KAAMZ,EAAgBK,uBAW1DQ,IAAMC,KAAN,kBAAsBJ,EAAK2C,KAA3B,eAAqC3C,EAAK2C,IAAM3C,EAAK6C,QAChDxC,MAAK,SAAAC,GAAQ,OAAIL,EAXO,SAAAD,GAAI,MAAK,CACtCE,KAAMZ,EAAgBM,uBACtBW,QAASP,GASsBuJ,CAAkBjJ,EAASG,UACrDC,OAAM,SAAAC,GAAG,OAAIV,GARWW,EAQgBD,EAAIE,QARL,CAC5CX,KAAMZ,EAAgBO,uBACtBU,QAASK,KAFoB,IAAAA,QegGlBQ,EAnHf,YAA8E,IAA3DC,EAA0D,EAA1DA,SAAU+H,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,YAAaF,EAA4B,EAA5BA,QAASG,EAAmB,EAAnBA,gBAAmB,EACnC1H,mBAAS,IAD0B,mBAClE4H,EADkE,KACrDC,EADqD,OAEzC7H,mBAAS,IAFgC,mBAElE8H,EAFkE,KAExDC,EAFwD,OAGnC/H,mBAAS,IAH0B,mBAGlEgI,EAHkE,KAGrDC,EAHqD,KAKzE,OACI,yBAAKtH,UAAU,gBACX,kBAAC,EAAD,CAAelB,SAAUA,IAEzB,yBAAKkB,UAAU,eACX,yBAAKA,UAAU,qCAAf,SAEU,cAAblB,EAA2B,uEAAoD,KAChF,6BAASkB,UAAU,mBACf,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,SAAd,aAEJ,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,SAAf,qBACA,yBAAKA,UAAU,SAASlB,KAGhC,yBAAKkB,UAAU,eACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,SAAf,iBACA,2BACIM,MAAO2G,EACP1G,SAAU,SAAAC,GAAC,OAAI0G,EAAe1G,EAAEC,OAAOH,QACvCiH,SAAuB,cAAbzI,EACVkB,UAAU,QAAQrC,KAAK,WAGnC,yBAAKqC,UAAU,eACX,yBAAKA,UAAU,eACX,4BAAQU,QAAS,kBAAMqG,EAAgB,CACnC3G,IAAK,WACLE,MAAO2G,KACPjH,UAAU,8BAHd,YAShB,6BAASA,UAAU,mBACf,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,SAAd,UAEJ,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,SAAf,kBACA,yBAAKA,UAAU,SAAS6G,KAGhC,yBAAK7G,UAAU,eACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,SAAf,cACA,2BACIM,MAAO6G,EACP5G,SAAU,SAAAC,GAAC,OAAI4G,EAAY5G,EAAEC,OAAOH,QACpCiH,SAAuB,cAAbzI,EACVkB,UAAU,QAAQrC,KAAK,WAGnC,yBAAKqC,UAAU,eACX,yBAAKA,UAAU,eACX,4BAAQU,QAAS,kBAAMqG,EAAgB,CACnC3G,IAAK,QACLE,MAAO6G,KACPnH,UAAU,8BAHd,YAShB,6BAASA,UAAU,mBACf,yBAAKA,UAAU,iBACX,wBAAIA,UAAU,SAAd,aAEJ,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,SAAf,iBACA,2BACIM,MAAO+G,EACP9G,SAAU,SAAAC,GAAC,OAAI8G,EAAe9G,EAAEC,OAAOH,QACvCiH,SAAuB,cAAbzI,EACVkB,UAAU,QAAQrC,KAAK,WAGnC,yBAAKqC,UAAU,eACX,yBAAKA,UAAU,eACX,4BAAQU,QAAS,kBAAMqG,EAAgB,CACnC3G,IAAK,WACLE,MAAO+G,KACPrH,UAAU,8BAHd,YAShB,kBAAC,EAAD,CAAS2G,QAASG,EAAaF,QAASA,Q,aC9BpD,IAEe/H,eAFS,SAAC,GAAD,MAA4B,CAAE8H,QAA9B,EAAGlJ,KAAQkJ,WAEK,CAAEnJ,kBAA3BqB,EA3Ef,YAA6C,IAA5B8H,EAA2B,EAA3BA,QAASnJ,EAAkB,EAAlBA,eAAkB,EAChB6B,mBAAS,CAAEP,SAAU,GAAI0I,SAAU,KADnB,mBACjCC,EADiC,KAC3BC,EAD2B,KAGlCvF,EAAW,SAAA3B,GACbkH,EAAQ,2BAAKD,GAAN,kBAAajH,EAAEC,OAAOG,KAAOJ,EAAEC,OAAOH,UAkBjD,OACI,oCACI,yBAAKN,UAAU,QACX,6BACI,uCACA,8BAEJ,0BAAMY,KAAK,QAAQZ,UAAU,cACzB,2BAAOqD,QAAQ,YAAf,YACA,2BACIzC,KAAK,WACLN,MAAOmH,EAAK3I,SACZyB,SAAU4B,EACVmB,YAAY,WACZ3F,KAAK,OACLqC,UAAU,iBAGd,2BAAOqD,QAAQ,YAAf,YACA,2BACIzC,KAAK,WACLN,MAAOmH,EAAKD,SACZjH,SAAU4B,EACVmB,YAAY,WACZ3F,KAAK,WACLqC,UAAU,kBAIlB,4BACIU,QA7CI,SAAAF,GAChBmH,IAAMC,KAAK,gBAAiB,CACxBC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,WAAYC,MAEhB9K,EAAeiK,GACfC,EAAQ,CAAE5I,SAAU,GAAI0I,SAAU,MAkCtBD,SAAUZ,EACV3G,UAAU,mBAHd,UAMJ,kBAAC,IAAD,CACI6H,SAAS,YACTC,UAAW,IACXC,iBAAe,EACfQ,aAAa,EACbP,cAAc,EACdQ,KAAK,EACLC,kBAAkB,EAClBP,WAAW,EACXD,cAAc,EACdS,UAAWJ,UCgC3B,IAEezJ,eAFS,SAAC,GAAD,MAA4B,CAAE8H,QAA9B,EAAGlJ,KAAQkJ,WAEpB9H,EArGf,YAAgC,IAAZ8H,EAAW,EAAXA,QAAW,EACHtH,mBAAS,CAAEP,SAAU,GAAI+H,MAAO,GAAIW,SAAU,KAD3C,mBACpBC,EADoB,KACdC,EADc,KAGrBvF,EAAW,SAAA3B,GACbkH,EAAQ,2BAAKD,GAAN,kBAAajH,EAAEC,OAAOG,KAAOJ,EAAEC,OAAOH,UAG3CqI,EAAY,uCAAG,sBAAAtG,EAAA,sEAEbsF,IAAMC,KAAK,iBAAkB,CACzBC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,WAAYC,MAVH,SAYP1K,IAAMC,KAAK,iBAAkB4J,GAZtB,OAabE,IAAMiB,QAAQ,wBAAyB,CACnCf,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,WAAYC,MAEhBZ,EAAQ,CAAE5I,SAAU,GAAI+H,MAAO,GAAIW,SAAU,KAvBhC,gDAyBb5E,QAAQC,IAAI,KAAIvE,SAzBH,yDAAH,qDA6BlB,OACI,oCACI,yBAAK0B,UAAU,QACX,6BACI,oDACA,8BAEJ,0BAAMY,KAAK,QAAQZ,UAAU,cACzB,2BAAOqD,QAAQ,YAAf,YACA,2BACIzC,KAAK,WACLN,MAAOmH,EAAK3I,SACZyB,SAAU4B,EACVmB,YAAY,WACZ3F,KAAK,OACLqC,UAAU,iBAGd,2BAAOqD,QAAQ,SAAf,SACA,2BACIzC,KAAK,QACLN,MAAOmH,EAAKZ,MACZtG,SAAU4B,EACVmB,YAAY,QACZ3F,KAAK,QACLqC,UAAU,iBAGd,2BAAOqD,QAAQ,YAAf,YACA,2BACIzC,KAAK,WACLN,MAAOmH,EAAKD,SACZjH,SAAU4B,EACVmB,YAAY,WACZ3F,KAAK,WACLqC,UAAU,kBAIlB,4BACIU,QAASiI,EACTpB,SAAUZ,EACV3G,UAAU,mBAHd,aAQJ,kBAAC,IAAD,CACI6H,SAAS,YACTC,UAAW,IACXC,iBAAe,EACfQ,aAAa,EACbP,cAAc,EACdQ,KAAK,EACLC,kBAAkB,EAClBP,WAAW,EACXD,cAAc,EACdS,UAAWJ,UC5C3B,IAEezJ,eAFS,SAAC,GAAD,QAAGpB,KAAH,MAAmC,CAAEkJ,QAArC,EAAWA,QAAmCkC,MAA9C,EAAoBA,SAEJ,CAAErL,kBAA3BqB,EAjDf,YAAmD,IAA1BrB,EAAyB,EAAzBA,eAAgBqL,EAAS,EAATA,MAcrC,OACI,oCACI,yBAAK7I,UAAU,kBACX,yBAAKA,UAAU,kBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,6BACI,4BACIU,QAtBK,WACrBiH,IAAMC,KAAK,6BAA8B,CACrCC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,WAAYC,MAEhB9K,EAAe,eAAKqL,KAYJlL,KAAK,SACLqC,UAAU,oBACVsE,MAAO,CAAEwE,OAAQ,aAJrB,sBAQR,kBAAC,IAAD,CACIjB,SAAS,YACTC,UAAW,IACXC,iBAAe,EACfQ,aAAa,EACbP,cAAc,EACdQ,KAAK,EACLC,kBAAkB,EAClBP,WAAW,EACXD,cAAc,EACdS,UAAWJ,UCJ3B,IAUezJ,eAVS,SAAC,GAAoD,IAAD,IAAjDpB,KACzB,MAAO,CACLsL,WAFwE,EAAzCA,WAEnBC,WAF4D,EAA7BA,WAEnBlK,SAFgD,EAAjBA,aAMhC,SAAApB,GAAQ,MAAK,CACtCa,WAAY,kBAAMb,EAASa,SAGdM,EA3Cf,YAAgE,IAAjDC,EAAgD,EAAhDA,SAAUiK,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,WAAYzK,EAAc,EAAdA,WAc/C,OAbAmB,qBAAU,WACR,GAAIqJ,EAAY,CACd,IACME,GADO,IAAIpF,MACKqF,UAAY,IAC9BF,GAAcC,IAChB1K,IACAI,EAAOkB,KAAK,oBAAqBf,SAGnCH,EAAOkB,KAAK,oBAAqBf,KAElC,CAACiK,EAAYxK,EAAYyK,EAAYlK,IAGtC,yBAAKkB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmJ,OAAK,EAACC,KAAK,KACfL,EAAa,kBAAC,EAAD,MAAW,kBAAC,IAAD,CAAU1C,GAAG,YAExC,kBAAC,IAAD,CAAO+C,KAAK,UACTL,EAAa,kBAAC,IAAD,CAAU1C,GAAG,MAAS,kBAAC,EAAD,OAEtC,kBAAC,IAAD,CAAOA,GAAE,WAAMvH,IACZiK,EAAa,kBAAC,EAAD,MAAc,kBAAC,IAAD,CAAU1C,GAAG,YAG3C,kBAAC,IAAD,CAAO+C,KAAK,IAAIC,UAAW,kBAAM,0D,0DCvClC,SAASC,EAAiBC,EAAOC,GACpC,OAAO,2BACAD,GADP,IAEI5C,SAAS,EACTtI,WAAYmL,EAAOxL,UCD3B,IAAMyL,EAAgB,CAClBV,YAAY,EACZjK,SAAU,KACV+H,MAAO,KACPF,SAAS,EACTqC,WAAY,KACZ3K,WAAY,KACZwK,MAAO,CACH/J,SAAU,YACV0I,SAAU,WAsCHkC,MAlCf,WAAqD,IAAhCH,EAA+B,uDAAvBE,EAAeD,EAAQ,uCAChD,OAAQA,EAAO7L,MACX,KAAKZ,EAAgBE,YACrB,KAAKF,EAAgBK,qBACjB,OAAO,2BAAKmM,GAAZ,IAAmB5C,SAAS,IAEhC,KAAK5J,EAAgBG,cACjB,OAAO,2BACAqM,GADP,IAEIlL,WAAY,KACZsI,SAAS,EACToC,YAAY,GACTS,EAAOxL,SAElB,KAAKjB,EAAgBM,uBACjB,OAAO,2BACAkM,GADP,IAEIlL,WAAY,KACZsI,SAAS,GACN6C,EAAOxL,SAGlB,KAAKjB,EAAgBI,cACrB,KAAKJ,EAAgBO,uBACjB,OAAOgM,EAAiBC,EAAOC,GACnC,KAAKzM,EAAgBQ,OAGjB,OAFAqF,QAAQC,IAAI,6BAA8B0G,EAAO,gCAE1CA,EACX,QACI,OAAOA,I,QC5CbE,EAAgB,CAClBxK,YAAa,GACbD,YAAa,IAoBF2K,EAjBK,WAAoC,IAAnCJ,EAAkC,uDAA1BE,EAAeD,EAAW,uCACnD,OAAQA,EAAO7L,MACX,KAAKa,EAAgBC,YACjB,OAAO,2BACA8K,GADP,IAEItK,YAAY,GAAD,mBAAMsK,EAAMtK,aAAZ,CAAyBuK,EAAOxL,YAEnD,KAAKQ,EAAgBE,YACjB,OAAO,2BACA6K,GADP,IAEIvK,YAAawK,EAAOxL,UAE5B,QACI,OAAOuL,ICpBZ,SAASD,EAAiBC,EAAOC,GACpC,OAAO,2BACAD,GADP,IAEIzC,aAAa,EACbzI,WAAYmL,EAAOxL,UCD3B,IAAMyL,GAAgB,CAClB/D,MAAO,GACPoB,aAAa,EACbzI,WAAY,MA6CDuL,GA1CK,WAAoC,IAAnCL,EAAkC,uDAA1BE,GAAeD,EAAW,uCACnD,OAAQA,EAAO7L,MACX,KAAKmD,EAAgBC,kBACrB,KAAKD,EAAgBI,eACrB,KAAKJ,EAAgBO,gBACrB,KAAKP,EAAgBU,kBACjB,OAAO,2BACA+H,GADP,IAEIzC,aAAa,IAGrB,KAAKhG,EAAgBE,oBACjB,OAAO,2BACAuI,GADP,IACczC,aAAa,EACvBpB,MAAO8D,EAAOxL,UAEtB,KAAK8C,EAAgBK,iBACjB,OAAO,2BACAoI,GADP,IACczC,aAAa,EACvBpB,MAAM,CAAE8D,EAAOxL,SAAV,mBAAsBuL,EAAM7D,UAEzC,KAAK5E,EAAgBQ,kBACjB,OAAO,2BACAiI,GADP,IACczC,aAAa,EACvBpB,MAAO6D,EAAM7D,MAAMxF,KAAI,SAAArC,GAAI,OAAIA,EAAKwG,MAAQmF,EAAOxL,QAAQqG,IAAMmF,EAAOxL,QAAUH,OAE1F,KAAKiD,EAAgBW,oBACjB,OAAO,2BACA8H,GADP,IACczC,aAAa,EACvBpB,MAAO6D,EAAM7D,MAAMO,QAAO,SAAApI,GAAI,OAAIA,EAAKwG,MAAQmF,EAAOxL,aAG9D,KAAK8C,EAAgBG,oBACrB,KAAKH,EAAgBY,oBACrB,KAAKZ,EAAgBS,kBACrB,KAAKT,EAAgBM,iBACjB,OAAOkI,EAAiBC,EAAOC,GACnC,QACI,OAAOD,ICtCbM,GAAgB,CAClBzJ,IAAK,OACL0J,YACAC,UAAW,CAAC,OAAQ,OAAQ,UAG1BC,GAAaC,YAAgB,CAC/BxM,KAAMiM,EACN3K,KAAM4K,EACNhE,MAAOuE,KAWIC,eAAeN,IATV,SAACN,EAAOC,GAMxB,OAJIA,EAAO7L,OAASZ,EAAgBQ,SAChCuM,IAAQM,WAAW,gBACnBb,OAAQnB,GAEL4B,GAAWT,EAAOC,MCnBvBa,GAAc,CAChBC,IACAC,KAGSC,GAAQC,YAAYC,GAAaC,IAAe,WAAf,EAAmBN,KACpDO,GAAYC,YAAaL,I,SCDlBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OAEP,kBAAC,IAAD,CAAUZ,MAAOA,IACf,kBAAC,IAAD,KACE,kBAAC,KAAD,CAAaI,UAAWA,IACtB,kBAAC,EAAD,SAKNS,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3N,MAAK,SAAA4N,GACJA,EAAaC,gBAEdxN,OAAM,SAAAyN,GACLhJ,QAAQgJ,MAAMA,EAAMtN,a","file":"static/js/main.c5fb88c9.chunk.js","sourcesContent":["const UserActionTypes = {\r\n    GUEST_USER: 'GUEST_USER',\r\n\r\n    LOGIN_START: 'LOGIN_START',\r\n    LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n    LOGIN_FAILURE: 'LOGIN_FAILURE',\r\n\r\n    UPDATE_PROFILE_START: 'UPDATE_PROFILE_START',\r\n    UPDATE_PROFILE_SUCCESS: 'UPDATE_PROFILE_SUCCESS',\r\n    UPDATE_PROFILE_FAILURE: 'UPDATE_PROFILE_FAILURE',\r\n\r\n    LOGOUT: 'LOGOUT',\r\n};\r\n\r\nexport default UserActionTypes;","import UserActionTypes from './userTypes';\r\nimport Axios from 'axios';\r\n\r\n// LOG IN\r\nexport const loginUserStart = () => ({ type: UserActionTypes.LOGIN_START });\r\nexport const loginUserSuccess = user => ({\r\n    type: UserActionTypes.LOGIN_SUCCESS,\r\n    payload: user,\r\n});\r\nexport const loginUserFailure = errMessage => ({\r\n    type: UserActionTypes.LOGIN_FAILURE,\r\n    payload: errMessage,\r\n});\r\nexport const loginUserAsync = user => dispatch => {\r\n    dispatch(loginUserStart());\r\n    Axios.post('/auth/login', user)\r\n        .then(response => dispatch(loginUserSuccess(response.data)))\r\n        .catch(err => dispatch(loginUserFailure(err.message)))\r\n}\r\n\r\n// UPDATE PROFILE\r\nexport const updateUserStart = () => ({ type: UserActionTypes.UPDATE_PROFILE_START });\r\nexport const updateUserSuccess = user => ({\r\n    type: UserActionTypes.UPDATE_PROFILE_SUCCESS,\r\n    payload: user,\r\n});\r\nexport const updateUserFailure = errMessage => ({\r\n    type: UserActionTypes.UPDATE_PROFILE_FAILURE,\r\n    payload: errMessage,\r\n});\r\nexport const updateUserAsync = user => dispatch => {\r\n    dispatch(updateUserStart());\r\n    Axios.post(`profile/${user.key}`, { [user.key]: user.value })\r\n        .then(response => dispatch(updateUserSuccess(response.data)))\r\n        .catch(err => dispatch(updateUserFailure(err.message)))\r\n}\r\n\r\n// LOGOUT\r\nexport const logoutUser = () => ({ type: UserActionTypes.LOGOUT });\r\n\r\n","const ChatActionTypes = {\r\n    NEW_MESSAGE: 'NEW_MESSAGE',\r\n    USER_ONLINE: 'USER_ONLINE',\r\n};\r\n\r\nexport default ChatActionTypes;","import io from \"socket.io-client\";\r\n\r\nconst socket = io.connect('/', { 'sync disconnect on unload': false })\r\n\r\nexport default socket","import React, { useEffect, } from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nimport { newMessage, userOnline } from '../../redux/chat/chatActions'\r\nimport socket from '../../initSocket'\r\n\r\nfunction Chat({ usersOnline, chatHistory, username, newMessage, userOnline }) {\r\n    const [messageValue, setMessageValue] = React.useState('');\r\n    const messagesRef = React.useRef();\r\n\r\n    const onSendMessage = () => {\r\n        if (messageValue !== '') {\r\n            socket.emit('new_message', {\r\n                username,\r\n                text: messageValue,\r\n            });\r\n        }\r\n        setMessageValue('');\r\n    };\r\n\r\n    useEffect(() => {\r\n        socket.on('update_users_online', usersOnline => {\r\n            userOnline(usersOnline)\r\n        })\r\n        socket.on('update_chat_history', message => {\r\n            newMessage(message)\r\n        })\r\n        return () => {\r\n            socket.off('update_users_online')\r\n            socket.off('update_chat_history')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (username) {\r\n            socket.emit('new_online_user', username)\r\n        }\r\n    }, [username])\r\n\r\n    useEffect(() => {\r\n        messagesRef.current.scrollTo(0, 99999);\r\n    }, [chatHistory]);\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <h4 className=\"chat-header\">Welcome to our Chat!</h4>\r\n            <span className=\"divider\"></span>\r\n            <div className=\"chat-messages\">\r\n                <div ref={messagesRef} className=\"messages\">\r\n                    {chatHistory.map((message, idx) => (\r\n                        <div key={idx} className={`message ${message.username === username ? 'my' : ''}`}>\r\n                            <span className='btn-secondary rounded px-1'>{message.username}</span>\r\n                            <p>{message.text}</p>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"myform\">\r\n                    <input\r\n                        value={messageValue}\r\n                        onChange={(e) => setMessageValue(e.target.value)}\r\n                        className=\"myinput\"\r\n                    />\r\n                    <button onClick={onSendMessage} type=\"button\" className=\"btn btn-secondary\">\r\n                        Send\r\n                </button>\r\n                </div>\r\n                <div className=\"chat-users\">\r\n                    <p>Online ({usersOnline.length}):</p>\r\n                    {usersOnline.map((name, index) => (\r\n                        <span key={name + index} className=\"badge badge-success mx-1\">{name}</span>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({ user: { username }, chat: { usersOnline, chatHistory } }) => ({\r\n    usersOnline, chatHistory, username\r\n})\r\n\r\nexport default connect(mapStateToProps, { newMessage, userOnline })(Chat);","import ChatActionTypes from './chatTypes';\r\n\r\nexport const newMessage = message => ({\r\n    type: ChatActionTypes.NEW_MESSAGE,\r\n    payload: message,\r\n});\r\n\r\nexport const userOnline = usersOnline => ({\r\n    type: ChatActionTypes.USER_ONLINE,\r\n    payload: usersOnline,\r\n});","const PostActionTypes = {\r\n    FETCH_POSTS_START: 'FETCH_POSTS_START',\r\n    FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\r\n    FETCH_POSTS_FAILURE: 'FETCH_POSTS_FAILURE',\r\n\r\n    NEW_POST_START: 'NEW_POST_START',\r\n    NEW_POST_SUCCESS: 'NEW_POST_SUCCESS',\r\n    NEW_POST_FAILURE: 'NEW_POST_FAILURE',\r\n\r\n    EDIT_POST_START: 'EDIT_POST_START',\r\n    EDIT_POST_SUCCESS: 'EDIT_POST_SUCCESS',\r\n    EDIT_POST_FAILURE: 'EDIT_POST_FAILURE',\r\n\r\n    DELETE_POST_START: 'DELETE_POST_START',\r\n    DELETE_POST_SUCCESS: 'DELETE_POST_SUCCESS',\r\n    DELETE_POST_FAILURE: 'DELETE_POST_FAILURE',\r\n};\r\n\r\nexport default PostActionTypes;","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport Axios from 'axios'\r\n\r\nimport { createPostAsync } from '../../redux/posts/postsActions'\r\n\r\nfunction NewPostModal({ username, createPostAsync }) {\r\n    const [postForm, setPostForm] = useState({\r\n        title: '', content: '', keyword: '', imglink: ''\r\n    });\r\n\r\n    const fillForm = e => setPostForm({ ...postForm, [e.target.name]: e.target.value })\r\n    const pickPexel = async () => {\r\n        try {\r\n            // LOADER ?\r\n            const response = await Axios.get(`https://api.pexels.com/v1/search?query=${postForm.keyword}&per_page=1`, {\r\n                headers: {\r\n                    'Authorization': \"563492ad6f9170000100000125fdd7dd0cbd4bada2257ce4d4c5b090\"\r\n                }\r\n            })\r\n            const link = response.data.photos[0].src.medium\r\n            setPostForm({ ...postForm, imglink: link })\r\n        } catch (err) {\r\n            console.log(err.message)\r\n        }\r\n    }\r\n    const cancel = () => setPostForm({ title: '', content: '', keyword: '', imglink: '' })\r\n    const handlePostSubmit = () => {\r\n        const newPost = {\r\n            author: username,\r\n            title: postForm.title,\r\n            content: postForm.content,\r\n            imglink: postForm.imglink,\r\n            date: new Date().toLocaleString(),\r\n        }\r\n        createPostAsync(newPost)\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog\" role=\"document\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">Create a new post</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <div className=\"form-group\">\r\n                            <label forhtml=\"title\">Title</label>\r\n                            <input value={postForm.title} onChange={fillForm} name=\"title\" type=\"text\" className=\"form-control\" id=\"title\" placeholder=\"Give a title for your post\" />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label forhtml=\"content\">Main content</label>\r\n                            <input value={postForm.content} onChange={fillForm} name='content' type=\"text\" className=\"form-control\" id=\"content\" placeholder=\"What is your post about?\" />\r\n                        </div>\r\n                        <label forhtml=\"image\">Fetch an image from pexels.com:</label>\r\n                        <div className=\"input-group\">\r\n                            <input value={postForm.keyword} onChange={fillForm} name='keyword' type=\"text\" className=\"form-control\" id=\"image\" placeholder=\"Enter keyword\" />\r\n                            <div className=\"input-group-append\">\r\n                                <button onClick={pickPexel} className=\"btn btn-outline-secondary\" type=\"button\">Pick random image</button>\r\n                            </div>\r\n                        </div>\r\n                        {postForm.imglink === '' ? null : (\r\n                            <img className='imglink' src={postForm.imglink} alt=\"pexel\" width=\"465\" height=\"300\" />\r\n                        )}\r\n                    </div>\r\n                    <div className=\"modal-footer d-flex justify-content-between\">\r\n                        <button onClick={cancel} type=\"button\" className=\"btn btn-outline-secondary\" data-dismiss=\"modal\">Cancel</button>\r\n                        <button onClick={handlePostSubmit} type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">POST</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ user: { username } }) => ({ username })\r\n\r\nexport default connect(mapStateToProps, { createPostAsync })(NewPostModal)\r\n","import PostActionTypes from './postsTypes';\r\nimport Axios from 'axios';\r\n\r\n// CREATE POST\r\nexport const createPostStart = () => ({ type: PostActionTypes.NEW_POST_START })\r\nexport const createPostSuccess = post => ({\r\n    type: PostActionTypes.NEW_POST_SUCCESS,\r\n    payload: post\r\n})\r\nexport const createPostFailure = errMessage => ({\r\n    type: PostActionTypes.NEW_POST_FAILURE,\r\n    payload: errMessage\r\n})\r\nexport const createPostAsync = post => dispatch => {\r\n    dispatch(createPostStart());\r\n    Axios.post('/post', post)\r\n        .then(response => {\r\n            dispatch(createPostSuccess(response.data.post))\r\n        }).catch(err => dispatch(createPostFailure(err.message)));\r\n}\r\n\r\n// FETCH ALL POSTS\r\nexport const fetchPostsStart = () => ({ type: PostActionTypes.FETCH_POSTS_START })\r\nexport const fetchPostsSuccess = posts => ({\r\n    type: PostActionTypes.FETCH_POSTS_SUCCESS,\r\n    payload: posts\r\n})\r\nexport const fetchPostsFailure = errMessage => ({\r\n    type: PostActionTypes.FETCH_POSTS_FAILURE,\r\n    payload: errMessage\r\n})\r\nexport const fetchPostsAsync = () => dispatch => {\r\n    dispatch(fetchPostsStart());\r\n    Axios.get('/post')\r\n        .then(response => {\r\n            console.log(response)\r\n            console.log(response.data)\r\n            dispatch(fetchPostsSuccess(response.data.posts.reverse()))\r\n        })\r\n        .catch(err => dispatch(fetchPostsFailure(err.message)));\r\n}\r\n\r\n// EDIT POST\r\nexport const editPostStart = () => ({ type: PostActionTypes.EDIT_POST_START });\r\nexport const editPostSuccess = post => ({\r\n    type: PostActionTypes.EDIT_POST_SUCCESS,\r\n    payload: post\r\n});\r\nexport const editPostFailure = errMessage => ({\r\n    type: PostActionTypes.EDIT_POST_FAILURE,\r\n    payload: errMessage\r\n});\r\nexport const editPostAsync = post => dispatch => {\r\n    dispatch(editPostStart())\r\n    Axios.post(`/post/${post._id}`, post)\r\n        .then(response => dispatch(editPostSuccess(response.data.post)))\r\n        .catch(err => dispatch(editPostFailure(err.message)))\r\n}\r\n\r\n// DELETE POST\r\nexport const deletePostStart = () => ({ type: PostActionTypes.DELETE_POST_START });\r\nexport const deletePostSuccess = postid => ({\r\n    type: PostActionTypes.DELETE_POST_SUCCESS,\r\n    payload: postid\r\n})\r\nexport const deletePostFailure = errMessage => ({\r\n    type: PostActionTypes.DELETE_POST_FAILURE,\r\n    payload: errMessage\r\n})\r\nexport const deletePostAsync = postid => dispatch => {\r\n    dispatch(deletePostStart())\r\n    Axios.delete(`/post/${postid}`)\r\n        .then(() => dispatch(deletePostSuccess(postid)))\r\n        .catch(err => dispatch(deletePostFailure(err.message)))\r\n}","import React from 'react'\r\n\r\nfunction Post({ username, post, onEdit, deletePost, id }) {\r\n    return (\r\n        <div className=\"post row no-gutters border rounded overflow-hidden flex-md-row mb-4 shadow-sm h-md-250 position-relative\">\r\n            <div className=\"col p-4 d-flex flex-column position-static\">\r\n                <strong className=\"d-inline-block mb-2 text-secondary\">{post.author}</strong>\r\n                <h3 className=\"mb-0\">{post.title}</h3>\r\n                <small className=\"mb-1 text-muted text-sm\">{post.date}</small>\r\n                <p className=\"mb-auto\">\r\n                    {post.content}\r\n                </p>\r\n                {/* Implement showImage() ? */}\r\n                <div className=\"continue text-secondary font-weight-light mt-2\">Image hidden</div>\r\n                {post.author === username ? (\r\n                    <div className='d-flex justify-content-between'>\r\n                        <button data-toggle=\"editmodal\" data-target=\"#editmodal\" onClick={() => onEdit({ show: true, id })} className='btn btn-outline-secondary' >Edit</button>\r\n                        <button onClick={() => deletePost(post._id)} className='btn btn-secondary'>Delete</button>\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n            <div className=\"col-auto d-flex d-lg-block\"\r\n                style={{\r\n                    backgroundImage: `url('${post.imglink}')`,\r\n                    backgroundRepeat: 'no-repeat',\r\n                    backgroundPosition: 'center',\r\n                    width: 200, height: 300\r\n                }}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { editPostAsync, deletePostAsync } from '../../redux/posts/postsActions';\r\nimport Post from './Post';\r\n\r\nfunction ListPosts({ username, filteredPosts, editPostAsync, deletePostAsync }) {\r\n    const [editMode, setEditMode] = useState({ show: false, id: null })\r\n    const [newPost, setNewPost] = useState({ editTitle: '', editContent: '' })\r\n\r\n    const handleEdit = e => setNewPost({ ...newPost, [e.target.name]: e.target.value })\r\n    const handlePostUpdate = () => {\r\n        const editedPost = {\r\n            ...filteredPosts[editMode.id],\r\n            title: newPost.editTitle,\r\n            content: newPost.editContent,\r\n            date: new Date().toLocaleString(),\r\n        }\r\n        editPostAsync(editedPost);\r\n        setEditMode({ show: false, id: null })\r\n        setNewPost({ editTitle: '', editContent: '' })\r\n    }\r\n\r\n    const cancelEdit = () => {\r\n        setEditMode({ show: false, id: null })\r\n        setNewPost({ editTitle: '', editContent: '' })\r\n    }\r\n\r\n    return (\r\n        <div className=\"posts-container\">\r\n            {editMode.show && (\r\n                <div className='edit-container bg-light'>\r\n                    <div className=\"edit-inputs\">\r\n                        <input className='edit-input' value={newPost.newTitle} onChange={handleEdit} placeholder={`Previous title: ${filteredPosts[editMode.id].title}`} name='editTitle' id='editTitle' />\r\n                        <input className='edit-input' value={newPost.newContent} onChange={handleEdit} placeholder={`Previous title: ${filteredPosts[editMode.id].content}`} name='editContent' id='editContent' />\r\n                    </div>\r\n                    <div className='edit-buttons d-flex justify-content-between'>\r\n                        <button className='btn btn-outline-secondary' onClick={cancelEdit}>Cancel</button>\r\n                        <button className='btn btn-secondary' onClick={handlePostUpdate}>SAVE</button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {filteredPosts.map((post, idx) => (\r\n                <Post\r\n                    username={username}\r\n                    post={post}\r\n                    deletePost={deletePostAsync}\r\n                    onEdit={setEditMode}\r\n                    id={idx}\r\n                    key={idx}\r\n                />\r\n            ))}\r\n        </div >\r\n    )\r\n}\r\nconst mapStateToProps = ({ user: { username } }) => ({ username })\r\n\r\nexport default connect(mapStateToProps, { editPostAsync, deletePostAsync })(ListPosts);","import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchPostsAsync } from '../../redux/posts/postsActions'\r\nimport NewPostModal from './NewPostModal';\r\nimport ListPosts from './ListPosts';\r\n\r\nfunction Posts({ username, fetchPostsAsync, items }) {\r\n    const [searchField, setSearchField] = useState('')\r\n\r\n    useEffect(() => {\r\n        let isActive = true; // AbortController\r\n        if (isActive && username) {\r\n            fetchPostsAsync()\r\n        }\r\n        return () => { isActive = false }\r\n    }, [username, fetchPostsAsync])\r\n\r\n    const filteredPosts = items.filter(post => post.title.toLowerCase().includes(searchField.toLowerCase()))\r\n    return (\r\n        <div className=\"posts\">\r\n            <div className=\"posts-menu\">\r\n                <div className=\"new-post btn btn-sm btn-outline-secondary\" data-toggle=\"modal\" data-target=\"#exampleModal\">\r\n                    <i className=\"fas fa-plus-circle fa-2x\"></i>\r\n                    <div>New Post</div>\r\n                </div>\r\n\r\n                <div className=\"input-group input-group-sm\" style={{ flex: 4 }}>\r\n                    <input\r\n                        value={searchField}\r\n                        onChange={e => setSearchField(e.target.value)}\r\n                        placeholder='Search by title'\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        aria-label=\"Search field\" />\r\n                </div>\r\n            </div>\r\n            <NewPostModal />\r\n            <ListPosts filteredPosts={filteredPosts} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ posts: { items }, user: { username } }) => ({ items, username })\r\n\r\nexport default connect(mapStateToProps, { fetchPostsAsync })(Posts);","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { logoutUser } from '../../redux/user/userActions';\r\nimport socket from '../../initSocket';\r\n\r\nfunction HomeNavBar({ username, logoutUser }) {\r\n\r\n    const handleLogout = () => {\r\n        socket.emit('user_disconnected', username)\r\n        logoutUser()\r\n    }\r\n\r\n    return (\r\n        <nav className=\"home-nav\">\r\n            <Link className=\"link btn btn-sm btn-outline-secondary\" to={`/${username}`}>\r\n                <i style={{ fontSize: 20, }} className=\"fas fa-user-edit fa-2x\"></i>\r\n                <div>Edit Profile</div>\r\n            </Link>\r\n            <div className=\"nav-profile\">\r\n                <img src=\"https://via.placeholder.com/40x40.jpg\" width=\"35\" height=\"35\" alt='profile' />\r\n                {username}\r\n            </div>\r\n            <div onClick={handleLogout} className=\"nav-logout btn btn-sm btn-outline-secondary\">\r\n                <div>Logout</div>\r\n                <i style={{ fontSize: 20, }} className=\"fas fa-sign-out-alt fa-2x\"></i>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ user: { username } }) => ({ username })\r\n\r\nexport default connect(mapStateToProps, { logoutUser })(HomeNavBar)","import React from 'react'\r\n\r\nimport Chat from '../../components/Chat/Chat';\r\nimport Posts from '../../components/Posts/Posts';\r\nimport HomeNavBar from '../../components/Navbars/HomeNavBar';\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className='home-container'>\r\n            <HomeNavBar />\r\n            <div className='posts-chat-container'>\r\n                <Posts />\r\n                <Chat />\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction ProfileNavBar({ username }) {\r\n    return (\r\n        <header className=\"header d-flex justify-content-between bg-light\">\r\n            <Link className=\"link btn btn-sm btn-secondary\" to='/'>\r\n                <i style={{ fontSize: 20, marginRight: 10 }} className=\"fas fa-arrow-circle-left\"></i>\r\n                <div>Back Home</div>\r\n            </Link>\r\n            <h2>{username}'s Profile</h2>\r\n            <button className=\"link btn btn-sm btn-outline-secondary\">\r\n                <i style={{ fontSize: 20, marginRight: 10 }} className=\"fas fa-user-slash\"></i>\r\n                    Delete Account\r\n                </button>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default ProfileNavBar\r\n","import React from 'react'\r\n\r\nfunction MyPosts({ loading, myposts }) {\r\n    return (\r\n        <div>\r\n            <h3>MY POSTS</h3>\r\n            {loading ? <h2>LOADING YOUR POSTS....</h2> : <h2>DONE</h2>}\r\n            {\r\n                myposts.length !== 0 && myposts.map((post, idx) => (\r\n                    <p key={idx}>{`${post.author}: ${post.title}. ${post.content}`}</p>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts\r\n","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nimport { updateUserAsync } from '../../redux/user/userActions';\r\nimport ProfileNavBar from '../../components/Navbars/ProfileNavBar';\r\nimport MyPosts from '../../components/MyPosts/MyPosts';\r\n\r\nfunction Profile({ username, email, areFetching, myposts, updateUserAsync }) {\r\n    const [newUsername, setNewUsername] = useState('')\r\n    const [newEmail, setNewEmail] = useState('')\r\n    const [newPassword, setNewPassword] = useState('')\r\n\r\n    return (\r\n        <div className=\"profile-page\">\r\n            <ProfileNavBar username={username} />\r\n\r\n            <div className=\"profile-pic\">\r\n                <div className=\"edit-pic btn btn-sm btn-secondary\">Edit</div>\r\n            </div>\r\n            {username === 'GuestUser' ? <div>GuestUsers cannot edit profile details</div> : null}\r\n            <section className=\"profile-section\">\r\n                <div className=\"section-title\">\r\n                    <h2 className=\"title\">Username</h2>\r\n                </div>\r\n                <div className=\"input-groups\">\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-field\">\r\n                            <div className=\"label\">Current username:</div>\r\n                            <div className=\"value\">{username}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-field\">\r\n                            <div className=\"label\">New username:</div>\r\n                            <input\r\n                                value={newUsername}\r\n                                onChange={e => setNewUsername(e.target.value)}\r\n                                disabled={username === 'GuestUser' ? true : false}\r\n                                className=\"value\" type=\"text\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-field\">\r\n                            <button onClick={() => updateUserAsync({\r\n                                key: 'username',\r\n                                value: newUsername\r\n                            })} className=\"save-btn btn btn-secondary\">Save</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"profile-section\">\r\n                <div className=\"section-title\">\r\n                    <h2 className=\"title\">Email</h2>\r\n                </div>\r\n                <div className=\"input-groups\">\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-field\">\r\n                            <div className=\"label\">Current email:</div>\r\n                            <div className=\"value\">{email}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-field\">\r\n                            <div className=\"label\">New email:</div>\r\n                            <input\r\n                                value={newEmail}\r\n                                onChange={e => setNewEmail(e.target.value)}\r\n                                disabled={username === 'GuestUser' ? true : false}\r\n                                className=\"value\" type=\"text\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-field\">\r\n                            <button onClick={() => updateUserAsync({\r\n                                key: 'email',\r\n                                value: newEmail\r\n                            })} className=\"save-btn btn btn-secondary\">Save</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n            <section className=\"profile-section\">\r\n                <div className=\"section-title\">\r\n                    <h2 className=\"title\">Password</h2>\r\n                </div>\r\n                <div className=\"input-groups\">\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-field\">\r\n                            <div className=\"label\">New password:</div>\r\n                            <input\r\n                                value={newPassword}\r\n                                onChange={e => setNewPassword(e.target.value)}\r\n                                disabled={username === 'GuestUser' ? true : false}\r\n                                className=\"value\" type=\"text\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-field\">\r\n                            <button onClick={() => updateUserAsync({\r\n                                key: 'password',\r\n                                value: newPassword\r\n                            })} className=\"save-btn btn btn-secondary\">Save</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n\r\n            <MyPosts loading={areFetching} myposts={myposts} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ user: { username, email }, posts: { items, areFetching } }) => ({\r\n    myposts: items.filter(post => post.author === username),\r\n    username,\r\n    email,\r\n    areFetching\r\n})\r\n\r\nexport default connect(mapStateToProps, { updateUserAsync })(Profile);\r\n","import React, { useState } from 'react';\r\nimport { ToastContainer, toast, Slide } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { loginUserAsync } from '../../redux/user/userActions';\r\n\r\nfunction Login({ loading, loginUserAsync }) {\r\n    const [form, setForm] = useState({ username: '', password: '' });\r\n\r\n    const fillForm = e => {\r\n        setForm({ ...form, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    const handleLogin = e => {\r\n        toast.info('Logging in...', {\r\n            position: \"top-right\",\r\n            autoClose: 1000,\r\n            hideProgressBar: true,\r\n            closeOnClick: false,\r\n            pauseOnHover: false,\r\n            draggable: false,\r\n            progress: undefined,\r\n            transition: Slide\r\n        });\r\n        loginUserAsync(form);\r\n        setForm({ username: '', password: '' })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='form' >\r\n                <div>\r\n                    <h4>Sign in</h4>\r\n                    <hr />\r\n                </div>\r\n                <form name='form1' className=\"form-group\">\r\n                    <label forhtml=\"username\">Username</label>\r\n                    <input\r\n                        name='username'\r\n                        value={form.username}\r\n                        onChange={fillForm}\r\n                        placeholder='Username'\r\n                        type='text'\r\n                        className=\"form-control\"\r\n                    />\r\n\r\n                    <label forhtml=\"password\">Password</label>\r\n                    <input\r\n                        name='password'\r\n                        value={form.password}\r\n                        onChange={fillForm}\r\n                        placeholder='Password'\r\n                        type='password'\r\n                        className=\"form-control\"\r\n                    />\r\n                </form>\r\n\r\n                <button\r\n                    onClick={handleLogin}\r\n                    disabled={loading}\r\n                    className=\"btn btn-primary\"\r\n                >LOGIN</button>\r\n            </div>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={1000}\r\n                hideProgressBar\r\n                newestOnTop={false}\r\n                closeOnClick={false}\r\n                rtl={false}\r\n                pauseOnFocusLoss={false}\r\n                draggable={false}\r\n                pauseOnHover={false}\r\n                transport={Slide}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ user: { loading } }) => ({ loading });\r\n\r\nexport default connect(mapStateToProps, { loginUserAsync })(Login);\r\n","import React, { useState } from 'react';\r\nimport { ToastContainer, toast, Slide } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Axios from 'axios';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nfunction Register({ loading }) {\r\n    const [form, setForm] = useState({ username: '', email: '', password: '' });\r\n\r\n    const fillForm = e => {\r\n        setForm({ ...form, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    const registerUser = async () => {\r\n        try {\r\n            toast.info('Registering...', {\r\n                position: \"top-right\",\r\n                autoClose: 1000,\r\n                hideProgressBar: true,\r\n                closeOnClick: false,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                progress: undefined,\r\n                transition: Slide\r\n            });\r\n            await Axios.post('/auth/register', form)\r\n            toast.success('Registration success!', {\r\n                position: \"top-right\",\r\n                autoClose: 1000,\r\n                hideProgressBar: true,\r\n                closeOnClick: false,\r\n                pauseOnHover: false,\r\n                draggable: false,\r\n                progress: undefined,\r\n                transition: Slide\r\n            });\r\n            setForm({ username: '', email: '', password: '' })\r\n        } catch (err) {\r\n            console.log(err.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='form' >\r\n                <div>\r\n                    <h4>Create a new account</h4>\r\n                    <hr />\r\n                </div>\r\n                <form name='form2' className=\"form-group\">\r\n                    <label forhtml=\"username\">Username</label>\r\n                    <input\r\n                        name='username'\r\n                        value={form.username}\r\n                        onChange={fillForm}\r\n                        placeholder='Username'\r\n                        type='text'\r\n                        className=\"form-control\"\r\n                    />\r\n\r\n                    <label forhtml=\"email\">Email</label>\r\n                    <input\r\n                        name='email'\r\n                        value={form.email}\r\n                        onChange={fillForm}\r\n                        placeholder='Email'\r\n                        type='email'\r\n                        className=\"form-control\"\r\n                    />\r\n\r\n                    <label forhtml=\"password\">Password</label>\r\n                    <input\r\n                        name='password'\r\n                        value={form.password}\r\n                        onChange={fillForm}\r\n                        placeholder='Password'\r\n                        type='password'\r\n                        className=\"form-control\"\r\n                    />\r\n                </form>\r\n\r\n                <button\r\n                    onClick={registerUser}\r\n                    disabled={loading}\r\n                    className=\"btn btn-primary\"\r\n                >REGISTER</button>\r\n\r\n\r\n            </div>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={1000}\r\n                hideProgressBar\r\n                newestOnTop={false}\r\n                closeOnClick={false}\r\n                rtl={false}\r\n                pauseOnFocusLoss={false}\r\n                draggable={false}\r\n                pauseOnHover={false}\r\n                transport={Slide}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ user: { loading } }) => ({ loading });\r\n\r\nexport default connect(mapStateToProps)(Register);\r\n","import React from 'react'\r\nimport { ToastContainer, toast, Slide } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { connect } from 'react-redux';\r\nimport { loginUserAsync } from '../../redux/user/userActions';\r\nimport Login from '../../components/Login/Login';\r\nimport Register from '../../components/Register/Register';\r\n\r\n\r\nfunction LoginRegister({ loginUserAsync, guest }) {\r\n    const handleGuestLogin = () => {\r\n        toast.info('Logging in as GuestUser...', {\r\n            position: \"top-right\",\r\n            autoClose: 1000,\r\n            hideProgressBar: true,\r\n            closeOnClick: false,\r\n            pauseOnHover: false,\r\n            draggable: false,\r\n            progress: undefined,\r\n            transition: Slide\r\n        });\r\n        loginUserAsync({ ...guest })\r\n    }\r\n    return (\r\n        <>\r\n            <div className='form-container'>\r\n                <div className='login_register'>\r\n                    <Login />\r\n                    <Register />\r\n                </div>\r\n                <div>\r\n                    <button\r\n                        onClick={handleGuestLogin}\r\n                        type=\"submit\"\r\n                        className='btn btn-secondary'\r\n                        style={{ margin: '0 0 30px' }}\r\n                    >Sign in as Guest</button>\r\n                </div>\r\n            </div>\r\n            <ToastContainer\r\n                position=\"top-right\"\r\n                autoClose={1000}\r\n                hideProgressBar\r\n                newestOnTop={false}\r\n                closeOnClick={false}\r\n                rtl={false}\r\n                pauseOnFocusLoss={false}\r\n                draggable={false}\r\n                pauseOnHover={false}\r\n                transport={Slide}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = ({ user: { loading, guest } }) => ({ loading, guest });\r\n\r\nexport default connect(mapStateToProps, { loginUserAsync })(LoginRegister);","import React, { useEffect } from 'react';\r\nimport './App.scss';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { logoutUser } from './redux/user/userActions';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nimport Home from './pages/Home/Home';\r\nimport Profile from './pages/Profile/Profile';\r\nimport LoginRegister from './pages/LoginRegister/LoginRegister';\r\nimport socket from './initSocket';\r\n\r\nfunction App({ username, isLoggedIn, validUntil, logoutUser }) {\r\n  useEffect(() => {\r\n    if (isLoggedIn) {\r\n      const date = new Date();\r\n      const currTime = date.getTime() / 1000;\r\n      if (validUntil <= currTime) {\r\n        logoutUser();\r\n        socket.emit('user_disconnected', username)\r\n      }\r\n    } else {\r\n      socket.emit('user_disconnected', username)\r\n    }\r\n  }, [isLoggedIn, logoutUser, validUntil, username]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          {isLoggedIn ? <Home /> : <Redirect to='/login' />}\r\n        </Route>\r\n        <Route path=\"/login\">\r\n          {isLoggedIn ? <Redirect to='/' /> : <LoginRegister />}\r\n        </Route>\r\n        <Route to={`/${username}`}>\r\n          {isLoggedIn ? <Profile /> : <Redirect to='/login' />}\r\n        </Route>\r\n        {/* <Route to={`/${username}`} component={Profile} /> */}\r\n        <Route path=\"*\" component={() => <h2>404 Page Not Found</h2>} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({ user: { isLoggedIn, validUntil, username } }) => {\r\n  return {\r\n    isLoggedIn, validUntil, username\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  logoutUser: () => dispatch(logoutUser())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","export function saveErrorMessage(state, action) {\r\n    return {\r\n        ...state,\r\n        loading: false,\r\n        errMessage: action.payload\r\n    }\r\n}","import UserActionTypes from './userTypes';\r\nimport { saveErrorMessage } from './userUtils';\r\n\r\nconst INITIAL_STATE = {\r\n    isLoggedIn: false,\r\n    username: null,\r\n    email: null,\r\n    loading: false,\r\n    validUntil: null,\r\n    errMessage: null,\r\n    guest: {\r\n        username: 'GuestUser',\r\n        password: '123456'\r\n    }\r\n};\r\n\r\nfunction userReducer(state = INITIAL_STATE, action) {\r\n    switch (action.type) {\r\n        case UserActionTypes.LOGIN_START:\r\n        case UserActionTypes.UPDATE_PROFILE_START:\r\n            return { ...state, loading: true }\r\n\r\n        case UserActionTypes.LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                errMessage: null,\r\n                loading: false,\r\n                isLoggedIn: true,\r\n                ...action.payload,\r\n            }\r\n        case UserActionTypes.UPDATE_PROFILE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                errMessage: null,\r\n                loading: false,\r\n                ...action.payload\r\n            }\r\n\r\n        case UserActionTypes.LOGIN_FAILURE:\r\n        case UserActionTypes.UPDATE_PROFILE_FAILURE:\r\n            return saveErrorMessage(state, action)\r\n        case UserActionTypes.LOGOUT:\r\n            console.log('Logging out..\\nuser state:', state, '\\nDisconnecting from chat...')\r\n            // SOCKET SHOULD EMIT USER DISCONNECTED AFTER LOGOUT\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default userReducer;","import ChatActionTypes from './chatTypes';\r\n\r\nconst INITIAL_STATE = {\r\n    chatHistory: [],\r\n    usersOnline: [],\r\n};\r\n\r\nconst chatReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case ChatActionTypes.NEW_MESSAGE:\r\n            return {\r\n                ...state,\r\n                chatHistory: [...state.chatHistory, action.payload]\r\n            }\r\n        case ChatActionTypes.USER_ONLINE:\r\n            return {\r\n                ...state,\r\n                usersOnline: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default chatReducer;","export function saveErrorMessage(state, action) {\r\n    return {\r\n        ...state,\r\n        areFetching: false,\r\n        errMessage: action.payload\r\n    }\r\n}","import PostActionTypes from './postsTypes';\r\nimport { saveErrorMessage } from './postUtils';\r\n\r\nconst INITIAL_STATE = {\r\n    items: [],\r\n    areFetching: false,\r\n    errMessage: null\r\n};\r\n\r\nconst postReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case PostActionTypes.FETCH_POSTS_START:\r\n        case PostActionTypes.NEW_POST_START:\r\n        case PostActionTypes.EDIT_POST_START:\r\n        case PostActionTypes.DELETE_POST_START:\r\n            return {\r\n                ...state,\r\n                areFetching: true\r\n            }\r\n\r\n        case PostActionTypes.FETCH_POSTS_SUCCESS:\r\n            return {\r\n                ...state, areFetching: false,\r\n                items: action.payload\r\n            }\r\n        case PostActionTypes.NEW_POST_SUCCESS:\r\n            return {\r\n                ...state, areFetching: false,\r\n                items: [action.payload, ...state.items]\r\n            };\r\n        case PostActionTypes.EDIT_POST_SUCCESS:\r\n            return {\r\n                ...state, areFetching: false,\r\n                items: state.items.map(post => post._id === action.payload._id ? action.payload : post)\r\n            }\r\n        case PostActionTypes.DELETE_POST_SUCCESS:\r\n            return {\r\n                ...state, areFetching: false,\r\n                items: state.items.filter(post => post._id !== action.payload)\r\n            }\r\n\r\n        case PostActionTypes.FETCH_POSTS_FAILURE:\r\n        case PostActionTypes.DELETE_POST_FAILURE:\r\n        case PostActionTypes.EDIT_POST_FAILURE:\r\n        case PostActionTypes.NEW_POST_FAILURE:\r\n            return saveErrorMessage(state, action)\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default postReducer;","import { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport userReducer from './user/userReducer';\r\nimport chatReducer from './chat/chatReducer';\r\nimport postsReducer from './posts/postsReducer';\r\nimport UserActionTypes from './user/userTypes';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: ['user', 'chat', 'posts']\r\n};\r\n\r\nconst appReducer = combineReducers({\r\n    user: userReducer,\r\n    chat: chatReducer,\r\n    posts: postsReducer\r\n})\r\nconst rootReducer = (state, action) => {\r\n    // LOGOUT\r\n    if (action.type === UserActionTypes.LOGOUT) {\r\n        storage.removeItem('persist:root')\r\n        state = undefined;\r\n    }\r\n    return appReducer(state, action);\r\n}\r\n\r\nexport default persistReducer(persistConfig, rootReducer);\r\n\r\n\r\n// import userReducer from './user/userReducer';\r\n// import chatReducer from './chat/chatReducer';\r\n// import postsReducer from './posts/postsReducer';\r\n\r\n// const persistConfig = {\r\n//     key: 'root',\r\n//     storage,\r\n//     whitelist: ['user', 'chat', 'posts']\r\n// };\r\n\r\n// const rootReducer = combineReducers({\r\n//     user: userReducer,\r\n//     chat: chatReducer,\r\n//     posts: postsReducer\r\n// })\r\n\r\n// export default persistReducer(persistConfig, rootReducer);\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport { persistStore } from 'redux-persist'\r\n\r\nimport rootReducer from './rootReducer';\r\n\r\nconst middlewares = [\r\n    thunk,\r\n    logger,\r\n];\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\nexport const persistor = persistStore(store);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { store, persistor } from './redux/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <PersistGate persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}